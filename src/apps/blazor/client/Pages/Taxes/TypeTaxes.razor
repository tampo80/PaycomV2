@page "/taxes/types-taxes"
@using MudBlazor
@using PayCom.Blazor.Client.Shared
@using PayCom.Blazor.Client.Components
@using PayCom.Blazor.Infrastructure.Api
@using Microsoft.AspNetCore.Components
@using PayCom.Blazor.Client.Pages.Taxes.Models
@using PayCom.Blazor.Client.Pages.Taxes.Dialogs
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@using PayCom.Blazor.Infrastructure.Storage
@using System.Security.Claims

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService _localStorage

<PageTitle>Types de Taxes - PayCom</PageTitle>

<AuthorizeView Context="auth">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
            <MudPaper Elevation="3" Class="pa-4 mb-4 rounded-lg">
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Color="Color.Primary" Size="Size.Large" Class="mr-2" />
                        <MudText Typo="Typo.h4" Color="Color.Primary">Gestion des types de taxes</MudText>
                    </MudStack>
                    <MudButton OnClick="OpenDialog" 
                              Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Add" 
                              Size="Size.Medium" 
                              Class="rounded-lg px-4">
                        Ajouter un type de taxe
                    </MudButton>
                </MudStack>

                <MudDivider Class="mb-4" />

                <MudPaper Elevation="0" Class="pa-4 rounded-lg" Style="background-color: var(--mud-palette-background-grey)">
                    <MudTable Items="@_typeTaxes" 
                             Loading="@_loading" 
                             LoadingProgressColor="Color.Primary" 
                             Hover="true" 
                             Striped="true" 
                             Elevation="0"
                             Breakpoint="Breakpoint.Sm" 
                             OnRowClick="@((e) => EditTypeTaxe(e.Item))"
                             Filter="new Func<TypeTaxeDto, bool>(FilterTypeTaxes)"
                             T="TypeTaxeDto"
                             Dense="true"
                             Class="rounded-lg">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6" Class="mud-text-secondary">Liste des types de taxes</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="_searchString" 
                                        Placeholder="Rechercher..." 
                                        Adornment="Adornment.Start" 
                                        AdornmentIcon="@Icons.Material.Filled.Search" 
                                        IconSize="Size.Medium" 
                                        Immediate="true"
                                        Variant="Variant.Outlined"
                                        Class="mt-0 ml-2" 
                                        Style="width: 300px"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh><MudTableSortLabel SortBy="new Func<TypeTaxeDto, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<TypeTaxeDto, object>(x => x.Nom)">Nom</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<TypeTaxeDto, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<TypeTaxeDto, object>(x => x.MontantBase)">Montant de base</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<TypeTaxeDto, object>(x => x.FrequencePaiement)">Fréquence</MudTableSortLabel></MudTh>
                            <MudTh Style="text-align: center">Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="typeTaxe">
                            <MudTd DataLabel="Id">@typeTaxe.Id</MudTd>
                            <MudTd DataLabel="Nom">@typeTaxe.Nom</MudTd>
                            <MudTd DataLabel="Description">@typeTaxe.Description</MudTd>
                            <MudTd DataLabel="Montant de base">@typeTaxe.MontantBase.ToString("N0") XOF</MudTd>
                            <MudTd DataLabel="Fréquence">@typeTaxe.FrequencePaiement</MudTd>
                            <MudTd Style="text-align: center">
                                <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                    <MudTooltip Text="Modifier ce type de taxe">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                      Color="Color.Primary" 
                                                      Size="Size.Small" 
                                                      OnClick="@(() => EditTypeTaxe(typeTaxe))" 
                                                      Class="ma-1" />
                                    </MudTooltip>
                                    <MudTooltip Text="Supprimer ce type de taxe">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                      Color="Color.Error" 
                                                      Size="Size.Small" 
                                                      OnClick="() => ShowDeleteConfirmation(typeTaxe)" 
                                                      Class="ma-1" />
                                    </MudTooltip>
                                </MudStack>
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                                <MudIcon Icon="@Icons.Material.Filled.SearchOff" Color="Color.Secondary" Size="Size.Large" />
                                <MudText Typo="Typo.subtitle1">Aucun type de taxe trouvé</MudText>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">Essayez de modifier vos critères de recherche ou ajoutez un nouveau type de taxe.</MudText>
                            </MudStack>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                                <MudText Typo="Typo.subtitle1">Chargement des types de taxes...</MudText>
                            </MudStack>
                        </LoadingContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100 }" />
                        </PagerContent>
                    </MudTable>
                </MudPaper>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center mud-height-full">
            <MudPaper Elevation="3" Class="pa-8 rounded-lg">
                <MudStack AlignItems="AlignItems.Center" Spacing="4">
                    <MudIcon Icon="@Icons.Material.Filled.Lock" Color="Color.Error" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Color="Color.Error">Accès non autorisé</MudText>
                    <MudText Typo="Typo.body1" Class="text-center">Vous n'avez pas les permissions nécessaires pour accéder à cette page.</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/"))" Class="mt-4">
                        Retour à l'accueil
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<TypeTaxeDto> _typeTaxes = new();
    private bool _loading = true;
    private string _searchString = "";
    private const string ApiVersion = "1.0";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            // Diagnostic de l'authentification
            var claims = authState.User.Claims.ToList();
            Console.WriteLine("Claims de l'utilisateur :");
            foreach (var claim in claims)
            {
                Console.WriteLine($"Type: {claim.Type}, Value: {claim.Value}");
            }

            // Vérification du token dans le localStorage
            var token = await _localStorage.GetItemAsync<string>(StorageConstants.Local.AuthToken);
            Console.WriteLine($"Token présent : {!string.IsNullOrEmpty(token)}");

            // Vérification des permissions
            var permissions = await _localStorage.GetItemAsync<ICollection<string>>(StorageConstants.Local.Permissions);
            if (permissions != null)
            {
                Console.WriteLine("Permissions de l'utilisateur :");
                foreach (var permission in permissions)
                {
                    Console.WriteLine($"- {permission}");
                }
            }
            else
            {
                Console.WriteLine("Aucune permission trouvée dans le localStorage");
            }

            await LoadData();
        }
        else
        {
            Console.WriteLine("Utilisateur non authentifié");
            NavigationManager.NavigateTo("/login", true);
        }
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            
            // Diagnostic avant l'appel API
            var token = await _localStorage.GetItemAsync<string>(StorageConstants.Local.AuthToken);
            Console.WriteLine($"Token avant l'appel API : {!string.IsNullOrEmpty(token)}");
            
            var searchCommand = new SearchTypeTaxesCommand
            {
                PageNumber = 1,
                PageSize = 50
            };
            
            var result = await ApiHelper.ExecuteCallGuardedAsync(
                async () => 
                {
                    // Vérification du token juste avant l'appel
                    var currentToken = await _localStorage.GetItemAsync<string>(StorageConstants.Local.AuthToken);
                    Console.WriteLine($"Token au moment de l'appel : {!string.IsNullOrEmpty(currentToken)}");
                    
                    return await ApiClient.SearchTypeTaxeEndPointsAsync(ApiVersion, searchCommand);
                },
                Snackbar,
                NavigationManager);

            if (result?.Items != null)
            {
                _typeTaxes = result.Items.Select(t => new TypeTaxeDto
                {
                    Id = t.Id,
                    Nom = t.Nom ?? string.Empty,
                    Description = t.Description ?? string.Empty,
                    MontantBase = Convert.ToDecimal(t.MontantBase),
                    FrequencePaiement = t.FrequencePaiement ?? string.Empty
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("403"))
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var claims = authState.User.Claims.ToList();
                Console.WriteLine("Claims au moment de l'erreur 403 :");
                foreach (var claim in claims)
                {
                    Console.WriteLine($"Type: {claim.Type}, Value: {claim.Value}");
                }

                Snackbar.Add("Vous n'avez pas les permissions nécessaires pour accéder à cette ressource", Severity.Error);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine($"Erreur détaillée : {ex}");
                Snackbar.Add($"Erreur lors du chargement des types de taxes: {ex.Message}", Severity.Error);
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private bool FilterTypeTaxes(TypeTaxeDto typeTaxe)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return typeTaxe.Nom.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               typeTaxe.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               typeTaxe.FrequencePaiement.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { 
            CloseButton = false, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };
        
        var parameters = new DialogParameters();
        parameters.Add("Model", new TypeTaxeDto());
        parameters.Add("DialogTitle", "Nouveau Type de Taxe");
        parameters.Add("ButtonText", "Ajouter");
        parameters.Add("OnValidSubmit", EventCallback.Factory.Create<TypeTaxeDto>(this, SaveTypeTaxe));

        await DialogService.ShowAsync<TypeTaxeDialog>("Nouveau Type de Taxe", parameters, options);
    }
    
    private async Task SaveTypeTaxe(TypeTaxeDto typeTaxe)
    {
        try
        {
            var command = new CreateTypeTaxeCommand
            {
                Nom = typeTaxe.Nom,
                Description = typeTaxe.Description,
                MontantBase = Convert.ToDouble(typeTaxe.MontantBase),
                FrequencePaiement = typeTaxe.FrequencePaiement
            };
            
            var success = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                async () =>
                {
                    await ApiClient.CreateTypeTaxeEndPointsAsync(ApiVersion, command);
                    return true;
                },
                Snackbar,
                NavigationManager,
                null,
                "Type de taxe ajouté avec succès");
                
            if (success)
            {
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            // Cette partie ne devrait plus être nécessaire car les erreurs sont traitées
            // dans le dialogue TypeTaxeDialog.razor qui reste ouvert en cas d'erreur
            Console.WriteLine($"Exception non capturée: {ex.Message}");
        }
    }
    
    private async Task EditTypeTaxe(TypeTaxeDto typeTaxe)
    {
        var options = new DialogOptions { 
            CloseButton = false, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };
        
        var parameters = new DialogParameters();
        parameters.Add("Model", typeTaxe);
        parameters.Add("DialogTitle", "Modifier le type de taxe");
        parameters.Add("ButtonText", "Mettre à jour");
        parameters.Add("OnValidSubmit", EventCallback.Factory.Create<TypeTaxeDto>(this, SaveEditedTypeTaxe));

        await DialogService.ShowAsync<TypeTaxeDialog>("Modifier le type de taxe", parameters, options);
    }
    
    private async Task SaveEditedTypeTaxe(TypeTaxeDto typeTaxe)
    {
        try
        {
            var command = new UpdateTypeTaxeCommand
            {
                Id = typeTaxe.Id,
                Nom = typeTaxe.Nom,
                Description = typeTaxe.Description,
                MontantBase = Convert.ToDouble(typeTaxe.MontantBase),
                FrequencePaiement = (PayCom.Blazor.Infrastructure.Api.FrequencePaiement)Enum.Parse<PayCom.Shared.Enums.FrequencePaiement>(typeTaxe.FrequencePaiement)
            };
            
            var success = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                async () =>
                {
                    await ApiClient.UpdateTypeTaxeEndPointsAsync(ApiVersion, typeTaxe.Id, command);
                    return true;
                },
                Snackbar,
                NavigationManager,
                null,
                "Type de taxe mis à jour avec succès");
                
            if (success)
            {
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            // Cette partie ne devrait plus être nécessaire car les erreurs sont traitées
            // dans le dialogue TypeTaxeDialog.razor qui reste ouvert en cas d'erreur
            Console.WriteLine($"Exception non capturée: {ex.Message}");
        }
    }
    
    private async Task ShowDeleteConfirmation(TypeTaxeDto typeTaxe)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Êtes-vous sûr de vouloir supprimer le type de taxe '{typeTaxe.Nom}' ?");
        parameters.Add("ButtonText", "Supprimer");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Components.ConfirmDialog>("Confirmation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool confirmed && confirmed)
        {
            await DeleteTypeTaxe(typeTaxe);
        }
    }
    
    private async Task DeleteTypeTaxe(TypeTaxeDto typeTaxe)
    {
        try
        {
            var success = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                async () =>
                {
                    await ApiClient.DeleteTypeTaxeEndPointsAsync(ApiVersion, typeTaxe.Id);
                    return true;
                },
                Snackbar,
                NavigationManager,
                null,
                "Type de taxe supprimé avec succès");
                
            if (success)
            {
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de la suppression: {ex.Message}", Severity.Error);
        }
    }
} 