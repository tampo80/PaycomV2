@page "/taxes/taxes"
@using MudBlazor
@using PayCom.Blazor.Client.Shared
@using PayCom.Blazor.Client.Components
@using PayCom.Blazor.Infrastructure.Api
@using Microsoft.AspNetCore.Components
@using PayCom.Blazor.Client.Pages.Taxes.Models
@using PayCom.Blazor.Client.Pages.Taxes.Dialogs
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@using PayCom.Blazor.Infrastructure.Storage
@using System.Security.Claims
@using PayCom.Blazor.Client.Services

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService _localStorage
@inject ITaxeService TaxeService

<PageTitle>Taxes - PayCom</PageTitle>

<AuthorizeView Context="auth">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
            <MudPaper Elevation="3" Class="pa-4 mb-4 rounded-lg">
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Receipt" Color="Color.Primary" Size="Size.Large" Class="mr-2" />
                        <MudText Typo="Typo.h4" Color="Color.Primary">Gestion des taxes</MudText>
                    </MudStack>
                    <MudButton OnClick="OpenDialog" 
                              Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Add" 
                              Size="Size.Medium" 
                              Class="rounded-lg px-4">
                        Ajouter une taxe
                    </MudButton>
                </MudStack>

                <MudDivider Class="mb-4" />

                <MudPaper Elevation="0" Class="pa-4 rounded-lg" Style="background-color: var(--mud-palette-background-grey)">
                    <MudTable Items="@_taxes" 
                             Loading="@_loading" 
                             LoadingProgressColor="Color.Primary" 
                             Hover="true" 
                             Striped="true" 
                             Elevation="0"
                             Breakpoint="Breakpoint.Sm" 
                             OnRowClick="@((e) => EditTaxe(e.Item))"
                             Filter="new Func<TaxeDto, bool>(FilterTaxes)"
                             T="TaxeDto"
                             Dense="true"
                             Class="rounded-lg">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6" Class="mud-text-secondary">Liste des taxes</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="_searchString" 
                                        Placeholder="Rechercher..." 
                                        Adornment="Adornment.Start" 
                                        AdornmentIcon="@Icons.Material.Filled.Search" 
                                        IconSize="Size.Medium" 
                                        Immediate="true"
                                        Variant="Variant.Outlined"
                                        Class="mt-0 ml-2" 
                                        Style="width: 300px"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh><MudTableSortLabel SortBy="new Func<TaxeDto, object>(x => x.AnneeImposition)">Année</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<TaxeDto, object>(x => x.TypeTaxeNom)">Type de taxe</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<TaxeDto, object>(x => x.ContribuableNom)">Contribuable</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<TaxeDto, object>(x => x.MontantDu)">Montant dû</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<TaxeDto, object>(x => x.SoldeRestant)">Solde restant</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<TaxeDto, object>(x => x.DateEcheance)">Échéance</MudTableSortLabel></MudTh>
                            <MudTh Style="text-align: center">Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="taxe">
                            <MudTd DataLabel="Année">@taxe.AnneeImposition</MudTd>
                            <MudTd DataLabel="Type de taxe">@taxe.TypeTaxeNom</MudTd>
                            <MudTd DataLabel="Contribuable">@taxe.ContribuableNom</MudTd>
                            <MudTd DataLabel="Montant dû">@taxe.MontantDu.ToString("N0") XOF</MudTd>
                            <MudTd DataLabel="Solde restant">@taxe.SoldeRestant.ToString("N0") XOF</MudTd>
                            <MudTd DataLabel="Échéance">@taxe.DateEcheance.ToString("dd/MM/yyyy")</MudTd>
                            <MudTd Style="text-align: center">
                                <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                    <MudTooltip Text="Modifier cette taxe">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                      Color="Color.Primary" 
                                                      Size="Size.Small" 
                                                      OnClick="@(() => EditTaxe(taxe))" 
                                                      Class="ma-1" />
                                    </MudTooltip>
                                    <MudTooltip Text="Supprimer cette taxe">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                      Color="Color.Error" 
                                                      Size="Size.Small" 
                                                      OnClick="() => ShowDeleteConfirmation(taxe)" 
                                                      Class="ma-1" />
                                    </MudTooltip>
                                    <MudTooltip Text="Payer cette taxe">
                                        <MudIconButton Icon="@Icons.Material.Filled.Payment" 
                                                      Color="Color.Success" 
                                                      Size="Size.Small" 
                                                      OnClick="() => ShowPaymentDialog(taxe)" 
                                                      Class="ma-1" />
                                    </MudTooltip>
                                </MudStack>
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                                <MudIcon Icon="@Icons.Material.Filled.SearchOff" Color="Color.Secondary" Size="Size.Large" />
                                <MudText Typo="Typo.subtitle1">Aucune taxe trouvée</MudText>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">Essayez de modifier vos critères de recherche ou ajoutez une nouvelle taxe.</MudText>
                            </MudStack>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                                <MudText Typo="Typo.subtitle1">Chargement des taxes...</MudText>
                            </MudStack>
                        </LoadingContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100 }" />
                        </PagerContent>
                    </MudTable>
                </MudPaper>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center mud-height-full">
            <MudPaper Elevation="3" Class="pa-8 rounded-lg">
                <MudStack AlignItems="AlignItems.Center" Spacing="4">
                    <MudIcon Icon="@Icons.Material.Filled.Lock" Color="Color.Error" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Color="Color.Error">Accès non autorisé</MudText>
                    <MudText Typo="Typo.body1" Class="text-center">Vous n'avez pas les permissions nécessaires pour accéder à cette page.</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/"))" Class="mt-4">
                        Retour à l'accueil
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<TaxeDto> _taxes = new();
    private bool _loading = true;
    private string _searchString = "";
    private const string ApiVersion = "1.0";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            await LoadData();
        }
        else
        {
            NavigationManager.NavigateTo("/login", true);
        }
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            
            var searchCommand = new SearchTaxesCommand
            {
                PageNumber = 1,
                PageSize = 50
            };
            
            var result = await TaxeService.SearchTaxesAsync(searchCommand);
            
            if (result?.Items != null)
            {
                _taxes = result.Items;
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("403"))
            {
                Snackbar.Add("Vous n'avez pas les permissions nécessaires pour accéder à cette ressource", Severity.Error);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine($"Erreur détaillée : {ex}");
                Snackbar.Add($"Erreur lors du chargement des taxes: {ex.Message}", Severity.Error);
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private bool FilterTaxes(TaxeDto taxe)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return taxe.TypeTaxeNom.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               taxe.ContribuableNom.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               taxe.AnneeImposition.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               taxe.UniteMesure.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { 
            CloseButton = false, 
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            BackdropClick = false
        };
        
        var parameters = new DialogParameters();
        parameters.Add("Model", new TaxeDto());
        parameters.Add("DialogTitle", "Nouvelle Taxe");
        parameters.Add("ButtonText", "Ajouter");
        parameters.Add("OnValidSubmit", EventCallback.Factory.Create<TaxeDto>(this, SaveTaxe));

        await DialogService.ShowAsync<TaxeDialog>("Nouvelle Taxe", parameters, options);
    }
    
    private async Task SaveTaxe(TaxeDto taxe)
    {
        try
        {
            var command = new Pages.Taxes.Models.CreateTaxeCommand
            {
                AnneeImposition = taxe.AnneeImposition,
                Taux = taxe.Taux,
                DateEcheance = taxe.DateEcheance,
                MontantDu = taxe.MontantDu,
                MontantPaye = taxe.MontantPaye,
                SoldeRestant = taxe.SoldeRestant,
                PrixUnitaire = taxe.PrixUnitaire,
                UniteMesure = taxe.UniteMesure,
                Caracteristiques = taxe.Caracteristiques,
                TypeTaxeId = taxe.TypeTaxeId,
                ContribuableId = taxe.ContribuableId
            };
            
            await TaxeService.CreateTaxeAsync(command);
            await LoadData();
            Snackbar.Add("Taxe ajoutée avec succès", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de l'ajout: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task EditTaxe(TaxeDto taxe)
    {
        var options = new DialogOptions { 
            CloseButton = false, 
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            BackdropClick = false
        };
        
        var parameters = new DialogParameters();
        parameters.Add("Model", taxe);
        parameters.Add("DialogTitle", "Modifier la taxe");
        parameters.Add("ButtonText", "Mettre à jour");
        parameters.Add("OnValidSubmit", EventCallback.Factory.Create<TaxeDto>(this, SaveEditedTaxe));

        await DialogService.ShowAsync<TaxeDialog>("Modifier la taxe", parameters, options);
    }
    
    private async Task SaveEditedTaxe(TaxeDto taxe)
    {
        try
        {
            var command = new Pages.Taxes.Models.UpdateTaxeCommand
            {
                Id = taxe.Id,
                AnneeImposition = taxe.AnneeImposition,
                Taux = taxe.Taux,
                DateEcheance = taxe.DateEcheance,
                MontantDu = taxe.MontantDu,
                MontantPaye = taxe.MontantPaye,
                SoldeRestant = taxe.SoldeRestant,
                PrixUnitaire = taxe.PrixUnitaire,
                UniteMesure = taxe.UniteMesure,
                Caracteristiques = taxe.Caracteristiques,
                TypeTaxeId = taxe.TypeTaxeId,
                ContribuableId = taxe.ContribuableId
            };
            
            await TaxeService.UpdateTaxeAsync(taxe.Id, command);
            await LoadData();
            Snackbar.Add("Taxe mise à jour avec succès", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de la mise à jour: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ShowDeleteConfirmation(TaxeDto taxe)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Êtes-vous sûr de vouloir supprimer la taxe pour {taxe.ContribuableNom} ?");
        parameters.Add("ButtonText", "Supprimer");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Components.ConfirmDialog>("Confirmation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool confirmed && confirmed)
        {
            await DeleteTaxe(taxe);
        }
    }
    
    private async Task DeleteTaxe(TaxeDto taxe)
    {
        try
        {
            await TaxeService.DeleteTaxeAsync(taxe.Id);
            await LoadData();
            Snackbar.Add("Taxe supprimée avec succès", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de la suppression: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ShowPaymentDialog(TaxeDto taxe)
    {
        // Cette méthode pourrait ouvrir un dialogue pour effectuer un paiement
        // Vous devrez implémenter cette fonctionnalité selon vos besoins
        Snackbar.Add("La fonctionnalité de paiement n'est pas encore implémentée", Severity.Info);
    }
} 