@page "/taxes/obligations-fiscales"
@using MudBlazor
@using PayCom.Blazor.Client.Shared
@using PayCom.Blazor.Client.Components
@using PayCom.Blazor.Infrastructure.Api
@using Microsoft.AspNetCore.Components
@using PayCom.Blazor.Client.Pages.Taxes.Models
@using PayCom.Blazor.Client.Pages.Taxes.Dialogs

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager

<PageTitle>Obligations Fiscales - PayCom</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="3" Class="pa-4 mb-4 rounded-lg">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Color="Color.Primary" Size="Size.Large" Class="mr-2" />
                <MudText Typo="Typo.h4" Color="Color.Primary">Gestion des obligations fiscales</MudText>
            </MudStack>
            <MudButton OnClick="OpenDialog" 
                      Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Add" 
                      Size="Size.Medium" 
                      Class="rounded-lg px-4">
                Ajouter une obligation fiscale
            </MudButton>
        </MudStack>

        <MudDivider Class="mb-4" />

        <MudPaper Elevation="0" Class="pa-4 rounded-lg" Style="background-color: var(--mud-palette-background-grey)">
            <MudTable Items="@_obligations" 
                     Loading="@_loading" 
                     LoadingProgressColor="Color.Primary" 
                     Hover="true" 
                     Striped="true" 
                     Elevation="0"
                     Breakpoint="Breakpoint.Sm" 
                     OnRowClick="@((e) => EditObligation(e.Item))"
                     Filter="new Func<ObligationFiscaleDto, bool>(FilterObligations)"
                     T="ObligationFiscaleDto"
                     Dense="true"
                     Class="rounded-lg">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="mud-text-secondary">Liste des obligations fiscales</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" 
                                Placeholder="Rechercher..." 
                                Adornment="Adornment.Start" 
                                AdornmentIcon="@Icons.Material.Filled.Search" 
                                IconSize="Size.Medium" 
                                Immediate="true"
                                Variant="Variant.Outlined"
                                Class="mt-0 ml-2" 
                                Style="width: 300px"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<ObligationFiscaleDto, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ObligationFiscaleDto, object>(x => x.NomContribuable)">Contribuable</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ObligationFiscaleDto, object>(x => x.NomTypeTaxe)">Type de taxe</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ObligationFiscaleDto, object>(x => x.DateDebut)">Date de début</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ObligationFiscaleDto, object>(x => x.DateFin)">Date de fin</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ObligationFiscaleDto, object>(x => x.MontantCalcule)">Montant</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ObligationFiscaleDto, object>(x => x.EstActif)">Statut</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align: center">Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Contribuable">
                        <MudChip Color="Color.Primary" Size="Size.Small" T="string">@context.NomContribuable</MudChip>
                    </MudTd>
                    <MudTd DataLabel="Type de taxe">
                        <MudChip Color="Color.Secondary" Size="Size.Small" T="string">@context.NomTypeTaxe</MudChip>
                    </MudTd>
                    <MudTd DataLabel="Date de début">
                        <MudText>@context.DateDebut.ToString("dd/MM/yyyy")</MudText>
                    </MudTd>
                    <MudTd DataLabel="Date de fin">
                        @if (context.DateFin.HasValue)
                        {
                            <MudText>@context.DateFin.Value.ToString("dd/MM/yyyy")</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.caption" Class="mud-text-disabled">Indéterminée</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Montant">
                        @if (context.MontantPersonnalise.HasValue)
                        {
                            <MudChip Color="Color.Info" Size="Size.Small" T="string">@context.MontantPersonnalise.Value.ToString("N0") XOF</MudChip>
                        }
                        else
                        {
                            <MudChip Color="Color.Dark" Size="Size.Small" T="string">@context.MontantCalcule.ToString("N0") XOF</MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Statut">
                        @if (context.EstActif)
                        {
                            <MudChip Color="Color.Success" Size="Size.Small" T="string">Actif</MudChip>
                        }
                        else
                        {
                            <MudChip Color="Color.Error" Size="Size.Small" T="string">Inactif</MudChip>
                        }
                    </MudTd>
                    <MudTd Style="text-align: center">
                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudTooltip Text="Modifier cette obligation">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                              Color="Color.Primary" 
                                              Size="Size.Small" 
                                              OnClick="@(() => EditObligation(context))" 
                                              Class="ma-1" />
                            </MudTooltip>
                            @if (context.EstActif)
                            {
                                <MudTooltip Text="Désactiver cette obligation">
                                    <MudIconButton Icon="@Icons.Material.Filled.Block" 
                                                Color="Color.Warning" 
                                                Size="Size.Small" 
                                                OnClick="() => ShowDesactivationConfirmation(context)" 
                                                Class="ma-1" />
                                </MudTooltip>
                            }
                            else
                            {
                                <MudTooltip Text="Réactiver cette obligation">
                                    <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" 
                                                Color="Color.Success" 
                                                Size="Size.Small" 
                                                OnClick="() => ShowReactivationConfirmation(context)" 
                                                Class="ma-1" />
                                </MudTooltip>
                            }
                            <MudTooltip Text="Supprimer cette obligation">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                              Color="Color.Error" 
                                              Size="Size.Small" 
                                              OnClick="() => ShowDeleteConfirmation(context)" 
                                              Class="ma-1" />
                            </MudTooltip>
                        </MudStack>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.SearchOff" Color="Color.Secondary" Size="Size.Large" />
                        <MudText Typo="Typo.subtitle1">Aucune obligation fiscale trouvée</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">Essayez de modifier vos critères de recherche ou ajoutez une nouvelle obligation fiscale.</MudText>
                    </MudStack>
                </NoRecordsContent>
                <LoadingContent>
                    <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                        <MudText Typo="Typo.subtitle1">Chargement des obligations fiscales...</MudText>
                    </MudStack>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private List<ObligationFiscaleDto> _obligations = new();
    private bool _loading = true;
    private string _searchString = "";
    private const string ApiVersion = "1.0";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            Console.WriteLine("Chargement des données des obligations fiscales...");
            
            // Appel à l'API pour récupérer les obligations fiscales
            var result = await ApiHelper.ExecuteCallGuardedAsync(
                async () =>
                {
                    try
                    {
                        var searchCommand = new SearchObligationFiscalesCommand
                        {
                            PageNumber = 1,
                            PageSize = 50
                        };
                        
                        Console.WriteLine("Exécution de la recherche des obligations fiscales");
                        
                        var response = await ApiClient.SearchObligationFiscaleEndPointsAsync(ApiVersion, searchCommand);
                        Console.WriteLine($"Recherche réussie. Nombre d'éléments récupérés: {response?.Items?.Count ?? 0}");
                        return response;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Erreur lors de la recherche des obligations fiscales: {ex.Message}");
                        Console.WriteLine($"StackTrace: {ex.StackTrace}");
                        if (ex.InnerException != null)
                        {
                            Console.WriteLine($"InnerException: {ex.InnerException.Message}");
                        }
                        throw;
                    }
                },
                Snackbar,
                NavigationManager);

            if (result?.Items != null)
            {
                _obligations = new List<ObligationFiscaleDto>();
                
                foreach (var item in result.Items)
                {
                    // Charger les informations détaillées sur le contribuable et le type de taxe
                    var obligation = new ObligationFiscaleDto
                    {
                        Id = item.Id,
                        ContribuableId = item.ContribuableId,
                        TypeTaxeId = item.TypeTaxeId,
                        DateDebut = item.DateDebut,
                        DateFin = item.DateFin,
                        MontantCalcule = Convert.ToDecimal(item.MontantCalcule),
                        MontantPersonnalise = item.MontantPersonnalise.HasValue ? Convert.ToDecimal(item.MontantPersonnalise.Value) : null,
                        EstActif = item.EstActif
                    };
                    
                    _obligations.Add(obligation);
                }
                
                // Chargement des noms de contribuables et types de taxe
                await LoadContribuablesInfo();
                await LoadTypeTaxesInfo();
                
                Console.WriteLine($"Données transformées. Nombre d'obligations fiscales chargées: {_obligations.Count}");
            }
            else
            {
                Console.WriteLine("Aucun résultat retourné par l'API ou résultat null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception lors du chargement des obligations fiscales: {ex.GetType().Name}");
            Console.WriteLine($"Message: {ex.Message}");
            
            Snackbar.Add($"Erreur lors du chargement des obligations fiscales: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            Console.WriteLine("Chargement des obligations fiscales terminé");
        }
    }

    // Méthode pour charger les informations des contribuables
    private async Task LoadContribuablesInfo()
    {
        try
        {
            // Liste des IDs de contribuables uniques
            var contribuableIds = _obligations.Select(o => o.ContribuableId).Distinct().ToList();
            
            // Pour chaque ID, récupérer les informations du contribuable
            foreach (var id in contribuableIds)
            {
                try
                {
                    var contribuable = await ApiClient.GetContribuableEndPointsAsync(ApiVersion, id);
                    if (contribuable != null)
                    {
                        // Mettre à jour toutes les obligations ayant ce contribuable
                        foreach (var obligation in _obligations.Where(o => o.ContribuableId == id))
                        {
                            obligation.NomContribuable = $"{contribuable.Nom} {contribuable.Prenom}";
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Erreur lors du chargement des infos du contribuable {id}: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des infos des contribuables: {ex.Message}");
        }
    }
    
    // Méthode pour charger les informations des types de taxe
    private async Task LoadTypeTaxesInfo()
    {
        try
        {
            // Liste des IDs de types de taxe uniques
            var typeTaxeIds = _obligations.Select(o => o.TypeTaxeId).Distinct().ToList();
            
            // Pour chaque ID, récupérer les informations du type de taxe
            foreach (var id in typeTaxeIds)
            {
                try
                {
                    var typeTaxe = await ApiClient.GetTypeTaxeEndPointsAsync(ApiVersion, id);
                    if (typeTaxe != null)
                    {
                        // Mettre à jour toutes les obligations ayant ce type de taxe
                        foreach (var obligation in _obligations.Where(o => o.TypeTaxeId == id))
                        {
                            obligation.NomTypeTaxe = typeTaxe.Nom;
                            obligation.FrequencePaiement = typeTaxe.FrequencePaiement;
                            obligation.Description = typeTaxe.Description;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Erreur lors du chargement des infos du type de taxe {id}: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des infos des types de taxe: {ex.Message}");
        }
    }

    private bool FilterObligations(ObligationFiscaleDto obligation)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return obligation.NomContribuable.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               obligation.NomTypeTaxe.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               obligation.Id.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };
        var parameters = new DialogParameters();
        parameters.Add("Model", new ObligationFiscaleDto());
        parameters.Add("DialogTitle", "Nouvelle Obligation Fiscale");
        parameters.Add("ButtonText", "Ajouter");
        parameters.Add("OnValidSubmit", EventCallback.Factory.Create<ObligationFiscaleDto>(this, SaveObligation));

        await DialogService.ShowAsync<ObligationFiscaleDialog>("Nouvelle Obligation Fiscale", parameters, options);
    }
    
    private async Task SaveObligation(ObligationFiscaleDto obligation)
    {
        try
        {
            Console.WriteLine($"Tentative d'ajout d'une obligation fiscale: Contribuable={obligation.ContribuableId}, TypeTaxe={obligation.TypeTaxeId}");
            
            // Création d'un objet command avec initialisation des propriétés
            var command = new CreateObligationFiscaleCommand
            {
                ContribuableId = obligation.ContribuableId,
                TypeTaxeId = obligation.TypeTaxeId,
                DateDebut = obligation.DateDebut,
                DateFin = obligation.DateFin,
                MontantPersonnalise = obligation.MontantPersonnalise.HasValue ? Convert.ToDouble(obligation.MontantPersonnalise.Value) : null
            };
            
            var success = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                async () =>
                {
                    await ApiClient.CreateObligationFiscaleEndPointsAsync(ApiVersion, command);
                    return true;
                },
                Snackbar,
                NavigationManager,
                null,
                "Obligation fiscale ajoutée avec succès");
                
            if (success)
            {
                await LoadData(); // Recharger les données
            }
        }
        catch (Exception ex)
        {
            string errorMessage = "Erreur lors de l'ajout de l'obligation fiscale";
            
            Console.WriteLine($"Exception détectée: {ex.GetType().Name}");
            Console.WriteLine($"Message: {ex.Message}");
            
            if (ex.Message.Contains("validation"))
            {
                errorMessage = "Veuillez vérifier les informations saisies";
            }
            
            Snackbar.Add(errorMessage, Severity.Error);
        }
    }
    
    private async Task EditObligation(ObligationFiscaleDto obligation)
    {
        var options = new DialogOptions { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };
        
        var parameters = new DialogParameters();
        parameters.Add("Model", obligation);
        parameters.Add("DialogTitle", "Modifier l'obligation fiscale");
        parameters.Add("ButtonText", "Mettre à jour");
        parameters.Add("OnValidSubmit", EventCallback.Factory.Create<ObligationFiscaleDto>(this, SaveEditedObligation));

        await DialogService.ShowAsync<ObligationFiscaleDialog>("Modifier l'obligation fiscale", parameters, options);
    }
    
    private async Task SaveEditedObligation(ObligationFiscaleDto obligation)
    {
        try
        {
            Console.WriteLine($"Tentative de mise à jour de l'obligation fiscale: {obligation.Id}");
            
            // Création d'un objet command pour la mise à jour
            var command = new UpdateObligationFiscaleCommand
            {
                Id = obligation.Id,
                DateFin = obligation.DateFin,
                MontantPersonnalise = obligation.MontantPersonnalise.HasValue ? (double?)Convert.ToDouble(obligation.MontantPersonnalise.Value) : null
            };
            
            var success = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                async () =>
                {
                    await ApiClient.UpdateObligationFiscaleEndPointsAsync(ApiVersion, obligation.Id, command);
                    return true;
                },
                Snackbar,
                NavigationManager,
                null,
                "Obligation fiscale mise à jour avec succès");
                
            if (success)
            {
                await LoadData(); // Recharger les données
            }
        }
        catch (Exception ex)
        {
            string errorMessage = "Erreur lors de la mise à jour de l'obligation fiscale";
            
            Console.WriteLine($"Exception détectée: {ex.GetType().Name}");
            Console.WriteLine($"Message: {ex.Message}");
            
            if (ex.Message.Contains("validation"))
            {
                errorMessage = "Veuillez vérifier les informations saisies";
            }
            
            Snackbar.Add(errorMessage, Severity.Error);
        }
    }
    
    private async Task ShowDeleteConfirmation(ObligationFiscaleDto obligation)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Êtes-vous sûr de vouloir supprimer cette obligation fiscale pour le contribuable '{obligation.NomContribuable}' ?");
        parameters.Add("ButtonText", "Supprimer");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Components.ConfirmDialog>("Confirmation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool confirmed && confirmed)
        {
            await DeleteObligation(obligation);
        }
    }
    
    private async Task DeleteObligation(ObligationFiscaleDto obligation)
    {
        try
        {
            var success = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                async () =>
                {
                    await ApiClient.DeleteObligationFiscaleEndPointsAsync(ApiVersion, obligation.Id);
                    return true;
                },
                Snackbar,
                NavigationManager,
                null,
                "Obligation fiscale supprimée avec succès");
                
            if (success)
            {
                await LoadData(); // Recharger les données
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de la suppression: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ShowDesactivationConfirmation(ObligationFiscaleDto obligation)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Êtes-vous sûr de vouloir désactiver cette obligation fiscale pour le contribuable '{obligation.NomContribuable}' ?");
        parameters.Add("ButtonText", "Désactiver");
        parameters.Add("Color", Color.Warning);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Components.ConfirmDialog>("Confirmation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool confirmed && confirmed)
        {
            await DesactiverObligation(obligation);
        }
    }
    
    private async Task DesactiverObligation(ObligationFiscaleDto obligation)
    {
        try
        {
            var success = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                async () =>
                {
                  //  await ApiClient.DesactiverObligationFiscaleEndPointsAsync(ApiVersion, obligation.Id);
                    return true;
                },
                Snackbar,
                NavigationManager,
                null,
                "Obligation fiscale désactivée avec succès");
                
            if (success)
            {
                await LoadData(); // Recharger les données
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de la désactivation: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task ShowReactivationConfirmation(ObligationFiscaleDto obligation)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Êtes-vous sûr de vouloir réactiver cette obligation fiscale pour le contribuable '{obligation.NomContribuable}' ?");
        parameters.Add("ButtonText", "Réactiver");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Components.ConfirmDialog>("Confirmation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool confirmed && confirmed)
        {
            await ReactiverObligation(obligation);
        }
    }
    
    private async Task ReactiverObligation(ObligationFiscaleDto obligation)
    {
        try
        {
            var success = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                async () =>
                {
           //         await ApiClient.ReactiverObligationFiscaleEndPointsAsync(ApiVersion, obligation.Id);
                    return true;
                },
                Snackbar,
                NavigationManager,
                null,
                "Obligation fiscale réactivée avec succès");
                
            if (success)
            {
                await LoadData(); // Recharger les données
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de la réactivation: {ex.Message}", Severity.Error);
        }
    }
} 