@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using PayCom.Blazor.Client.Pages.Taxes.Models
@using MudBlazor.Interfaces
@using PayCom.Blazor.Infrastructure.Api
@using System.Threading
@using PayCom.Blazor.Client.Services
@using System.Net.Http.Json
@using System.Reflection

@inject IApiClient ApiClient
@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory

<MudDialog DisableSidePadding="true" CloseButton="false">
    <TitleContent>
        <div style="background-color: var(--mud-palette-primary); margin: -16px -24px -16px -24px; padding: 16px 24px;">
            <div class="d-flex flex-row align-center justify-space-between">
                <div class="d-flex flex-row align-center">
                    <MudIcon Icon="@Icons.Material.Filled.Receipt" Class="mr-2" Style="color: white;" />
                    <MudText Typo="Typo.h6" Style="color: white;">@DialogTitle</MudText>
                </div>
                
            </div>
        </div>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="@Model" @bind-IsValid="@_isValid">
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="my-2">@_errorMessage</MudAlert>
            }
            <div class="d-flex flex-column gap-4 mt-4">
                <MudGrid>
                    <!-- Première ligne -->
                    <MudItem xs="12" md="6">
                        <MudAutocomplete T="TypeTaxeRefDto" 
                                       Label="Type de taxe" 
                                       @bind-Value="_selectedTypeTaxe"
                                       SearchFunc="@SearchTypeTaxes"
                                       ToStringFunc="@(t => t == null ? string.Empty : t.Nom)"
                                       AdornmentIcon="@Icons.Material.Filled.Search"
                                       AdornmentColor="Color.Primary"
                                       Required
                                       ResetValueOnEmptyText="true"
                                       CoerceText="true"
                                       CoerceValue="true"
                                       OnClearButtonClick="@(() => _selectedTypeTaxe = null)"
                                       Clearable
                                       Immediate="true"
                                       OnBlur="@UpdateTypeTaxe"
                                       Variant="Variant.Outlined"/>
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudAutocomplete T="ContribuableRefDto" 
                                       Label="Contribuable" 
                                       @bind-Value="_selectedContribuable"
                                       SearchFunc="@SearchContribuables"
                                       ToStringFunc="@(c => c == null ? string.Empty : c.NomComplet)"
                                       AdornmentIcon="@Icons.Material.Filled.Search"
                                       AdornmentColor="Color.Primary"
                                       Required
                                       ResetValueOnEmptyText="true"
                                       CoerceText="true"
                                       CoerceValue="true"
                                       OnClearButtonClick="@(() => _selectedContribuable = null)"
                                       Clearable
                                       Immediate="true"
                                       OnBlur="@UpdateContribuable"
                                       Variant="Variant.Outlined"/>
                    </MudItem>
                    
                    <!-- Deuxième ligne -->
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="Model.AnneeImposition"
                                       For="@(() => Model.AnneeImposition)"
                                       Label="Année d'imposition"
                                       Variant="Variant.Outlined"
                                       Required="true"
                                       RequiredError="L'année d'imposition est requise"
                                       Min="2000"
                                       Max="2100" />
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="Model.Taux"
                                       For="@(() => Model.Taux)"
                                       Label="Taux (%)"
                                       Variant="Variant.Outlined"
                                       Required="true"
                                       RequiredError="Le taux est requis"
                                       Min="0"
                                       Max="100"
                                       Format="N2"
                                       Adornment="Adornment.End"
                                       AdornmentText="%" />
                    </MudItem>
                    
                    <!-- Troisième ligne -->
                    <MudItem xs="12" md="6">
                        <MudDatePicker @bind-Date="_dateEcheance"
                                     Label="Date d'échéance"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     RequiredError="La date d'échéance est requise"
                                     DateFormat="dd/MM/yyyy" />
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="Model.PrixUnitaire"
                                       For="@(() => Model.PrixUnitaire)"
                                       Label="Prix unitaire"
                                       Variant="Variant.Outlined"
                                       Required="true"
                                       RequiredError="Le prix unitaire est requis"
                                       Min="0"
                                       Format="N0"
                                       Adornment="Adornment.End"
                                       AdornmentText="XOF" />
                    </MudItem>
                    
                    <!-- Quatrième ligne -->
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="Model.MontantDu"
                                       For="@(() => Model.MontantDu)"
                                       Label="Montant dû"
                                       Variant="Variant.Outlined"
                                       Required="true"
                                       RequiredError="Le montant dû est requis"
                                       Min="0"
                                       Format="N0"
                                       Adornment="Adornment.End"
                                       AdornmentText="XOF" />
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="Model.MontantPaye"
                                       For="@(() => Model.MontantPaye)"
                                       Label="Montant payé"
                                       Variant="Variant.Outlined"
                                       Required="true"
                                       RequiredError="Le montant payé est requis"
                                       Min="0"
                                       Format="N0"
                                       Adornment="Adornment.End"
                                       AdornmentText="XOF" />
                    </MudItem>
                    
                    <!-- Cinquième ligne -->
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="Model.UniteMesure"
                                    For="@(() => Model.UniteMesure)"
                                    Label="Unité de mesure"
                                    Variant="Variant.Outlined"
                                    Required="true"
                                    RequiredError="L'unité de mesure est requise" />
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="Model.Caracteristiques"
                                    For="@(() => Model.Caracteristiques)"
                                    Label="Caractéristiques"
                                    Variant="Variant.Outlined"
                                    Lines="3" />
                    </MudItem>
                </MudGrid>
            </div>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text" Color="Color.Default">Annuler</MudButton>
        <MudButton OnClick="Submit" 
                  Variant="Variant.Filled" 
                  Color="Color.Primary" 
                  Disabled="@(!_isValid)"
                  Class="ml-2">@ButtonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;
    
    [Parameter] public TaxeDto Model { get; set; } = default!;
    [Parameter] public string DialogTitle { get; set; } = string.Empty;
    [Parameter] public string ButtonText { get; set; } = "Ajouter";
    [Parameter] public EventCallback<TaxeDto> OnValidSubmit { get; set; }

    private MudForm form = default!;
    private bool _isValid;
    private string _errorMessage = string.Empty;
    private TypeTaxeRefDto? _selectedTypeTaxe;
    private ContribuableRefDto? _selectedContribuable;
    private DateTime? _dateEcheance;
    private const string ApiVersion = "1.0";

    protected override void OnInitialized()
    {
        if (Model == null)
        {
            Model = new TaxeDto();
        }
        
        if (Model.TypeTaxeId.HasValue && !string.IsNullOrEmpty(Model.TypeTaxeNom))
        {
            _selectedTypeTaxe = new TypeTaxeRefDto
            {
                Id = Model.TypeTaxeId.Value,
                Nom = Model.TypeTaxeNom
            };
        }
        
        if (Model.ContribuableId.HasValue && !string.IsNullOrEmpty(Model.ContribuableNom))
        {
            var nomPrenom = Model.ContribuableNom.Split(' ', 2);
            _selectedContribuable = new ContribuableRefDto
            {
                Id = Model.ContribuableId.Value,
                Nom = nomPrenom.Length > 0 ? nomPrenom[0] : "",
                Prenom = nomPrenom.Length > 1 ? nomPrenom[1] : ""
            };
        }
        
        _dateEcheance = Model.DateEcheance;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            try
            {
                // Mise à jour de la date d'échéance depuis le DatePicker
                if (_dateEcheance.HasValue)
                {
                    Model.DateEcheance = _dateEcheance.Value;
                }
                
                // Calcul du solde restant
                Model.SoldeRestant = Model.MontantDu - Model.MontantPaye;
                
                // Vérifier que les IDs requis sont présents
                if (!Model.TypeTaxeId.HasValue)
                {
                    _errorMessage = "Veuillez sélectionner un type de taxe";
                    return;
                }
                
                if (!Model.ContribuableId.HasValue)
                {
                    _errorMessage = "Veuillez sélectionner un contribuable";
                    return;
                }
                
                try
                {
                    // Si c'est une nouvelle taxe
                    if (Model.Id == Guid.Empty)
                    {
                        // Créer une commande API
                        var apiCommand = new PayCom.Blazor.Infrastructure.Api.CreateTaxeCommand
                        {
                            AnneeImposition = Model.AnneeImposition,
                            Taux = (double)Model.Taux,
                            DateEcheance = Model.DateEcheance,
                            MontantDu = (double)Model.MontantDu,
                            MontantPaye = (double)Model.MontantPaye,
                            SoldeRestant = (double)Model.SoldeRestant,
                            PrixUnitaire = (double)Model.PrixUnitaire,
                            UniteMesure = Model.UniteMesure,
                            Caracteristiques = Model.Caracteristiques,
                            DateCreation = DateTime.Now,
                            DateDerniereModification = DateTime.Now
                        };
                        
                        // Utiliser la réflexion pour accéder au HttpClient interne de ApiClient
                        var httpClientField = typeof(ApiClient).GetField("_httpClient", BindingFlags.NonPublic | BindingFlags.Instance);
                        if (httpClientField != null)
                        {
                            var httpClient = httpClientField.GetValue(ApiClient) as HttpClient;
                            if (httpClient != null)
                            {
                                // Construire l'URL avec les paramètres
                                var url = $"api/v{ApiVersion}/taxe/taxes?typeTaxeId={Model.TypeTaxeId.Value}&contribuableId={Model.ContribuableId.Value}";
                                
                                // Sérialiser la commande
                                var content = JsonContent.Create(apiCommand);
                                
                                // Faire l'appel HTTP
                                var response = await httpClient.PostAsync(url, content);
                                
                                if (response.IsSuccessStatusCode)
                                {
                                    Snackbar.Add("Taxe créée avec succès", Severity.Success);
                                }
                                else
                                {
                                    var errorContent = await response.Content.ReadAsStringAsync();
                                    Snackbar.Add($"Erreur lors de l'enregistrement: {errorContent}", Severity.Error);
                                    return;
                                }
                            }
                            else
                            {
                                Snackbar.Add("Impossible d'accéder au client HTTP", Severity.Error);
                                return;
                            }
                        }
                        else
                        {
                            Snackbar.Add("Impossible d'accéder au client HTTP", Severity.Error);
                            return;
                        }
                    }
                    else // Si c'est une mise à jour
                    {
                        // Ici, vous devriez avoir un UpdateTaxeCommand si nécessaire
                        // await ApiClient.UpdateTaxeEndPointsAsync(ApiVersion, Model.Id, updateCommand);
                        Snackbar.Add("Taxe mise à jour avec succès", Severity.Success);
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erreur lors de l'enregistrement: {ex.Message}", Severity.Error);
                    Console.WriteLine($"Erreur API: {ex}");
                    return;
                }
                
                await OnValidSubmit.InvokeAsync(Model);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                _errorMessage = ex.Message;
                Console.WriteLine($"Erreur générale: {ex}");
            }
        }
    }
    
    // Recherche des types de taxe
    private async Task<IEnumerable<TypeTaxeRefDto>> SearchTypeTaxes(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(value))
            return new List<TypeTaxeRefDto>();

        try
        {
            // Appel à l'API pour rechercher les types de taxe
            var searchCommand = new SearchTypeTaxesCommand
            {
                PageNumber = 1,
                PageSize = 10,
                Keyword = value
            };

            var result = await ApiClient.SearchTypeTaxeEndPointsAsync(ApiVersion, searchCommand, cancellationToken);
            
            // Conversion des résultats API en TypeTaxeRefDto
            return result.Items.Select(t => new TypeTaxeRefDto
            {
                Id = t.Id,
                Nom = t.Nom,
                Description = t.Description,
                MontantBase = (decimal)t.MontantBase,
                FrequencePaiement = t.FrequencePaiement
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la recherche des types de taxe: {ex.Message}");
            return new List<TypeTaxeRefDto>();
        }
    }
    
    // Recherche des contribuables
    private async Task<IEnumerable<ContribuableRefDto>> SearchContribuables(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(value))
            return new List<ContribuableRefDto>();

        try
        {
            // Appel à l'API pour rechercher les contribuables
            var searchCommand = new SearchContribuableCommand
            {
                PageNumber = 1,
                PageSize = 10,
                Keyword = value
            };
            
            var result = await ApiClient.SearchContribuableEndPointsAsync(ApiVersion, searchCommand, cancellationToken);
            
            // Conversion des résultats API en ContribuableRefDto
            return result.Items.Select(c => new ContribuableRefDto
            {
                Id = c.Id ?? Guid.Empty,
                Nom = c.Nom,
                Prenom = c.Prenom,
                NumeroIdentification = c.NumeroIdentification
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la recherche des contribuables: {ex.Message}");
            return new List<ContribuableRefDto>();
        }
    }
    
    // Mettre à jour le modèle quand le type de taxe est sélectionné
    private void UpdateTypeTaxe()
    {
        if (_selectedTypeTaxe != null)
        {
            Model.TypeTaxeId = _selectedTypeTaxe.Id;
            Model.TypeTaxeNom = _selectedTypeTaxe.Nom;
        }
        else
        {
            Model.TypeTaxeId = null;
            Model.TypeTaxeNom = string.Empty;
        }
        
        form?.Validate();
    }
    
    // Mettre à jour le modèle quand le contribuable est sélectionné
    private void UpdateContribuable()
    {
        if (_selectedContribuable != null)
        {
            Model.ContribuableId = _selectedContribuable.Id;
            Model.ContribuableNom = _selectedContribuable.NomComplet;
        }
        else
        {
            Model.ContribuableId = null;
            Model.ContribuableNom = string.Empty;
        }
        
        form?.Validate();
    }
} 