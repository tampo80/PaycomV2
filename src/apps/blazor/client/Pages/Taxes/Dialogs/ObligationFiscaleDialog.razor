@using MudBlazor
@using PayCom.Blazor.Client.Pages.Taxes.Models
@using PayCom.Blazor.Infrastructure.Api
@using PayCom.Blazor.Client.Components

@inject IApiClient ApiClient
@inject ISnackbar Snackbar

<MudDialog DisableSidePadding="true">
    <TitleContent>
        <div style="background-color: var(--mud-palette-primary); margin: -16px -24px -16px -24px; padding: 16px 24px;">
            <div class="d-flex flex-row align-center">
                <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Class="mr-2" Style="color: white;" />
                <MudText Typo="Typo.h6" Style="color: white;">@DialogTitle</MudText>
            </div>
        </div>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model" @ref="form" Validation="@(new Func<ObligationFiscaleDto, string>(ValidateForm))" ValidationDelay="0">
            <ErrorDisplay ErrorMessage="@_errorMessage" Errors="@_validationErrors" OnClose="@(() => { _errorMessage = string.Empty; _validationErrors.Clear(); })" />
            
            <!-- Section Informations -->
            <div class="d-flex flex-column gap-4 mt-4">
                <!-- Contribuable -->
                <MudAutocomplete T="ContribuableRefDto" Label="Contribuable" 
                                @bind-Value="_selectedContribuable" 
                                SearchFunc="@SearchContribuables"
                                ToStringFunc="@(c => c == null ? string.Empty : $"{c.Nom} {c.Prenom}")"
                                AdornmentIcon="@Icons.Material.Filled.Search"
                                AdornmentColor="Color.Primary"
                                Required="true"
                                ResetValueOnEmptyText="true"
                                CoerceText="true"
                                CoerceValue="true"
                                Error="@(_fieldErrors.ContainsKey("Contribuable"))"
                                ErrorText="@GetFieldErrorMessage("Contribuable")"
                                HelperText="Recherchez un contribuable par nom ou numéro d'identification"
                                Immediate="true"
                                OnClearButtonClick="@(() => { _selectedContribuable = null; Model.ContribuableId = Guid.Empty; })">
                    <ItemTemplate Context="item">
                        <div class="d-flex flex-row align-center">
                            <MudAvatar Color="Color.Primary" Class="mr-2">@(item.Nom[0])</MudAvatar>
                            <div>
                                <MudText Typo="Typo.body1">@item.Nom @item.Prenom</MudText>
                                <MudText Typo="Typo.caption">@item.NumeroIdentification</MudText>
                            </div>
                        </div>
                    </ItemTemplate>
                </MudAutocomplete>
                
                <!-- Type de taxe -->
                <MudAutocomplete T="TypeTaxeRefDto" Label="Type de taxe" 
                                @bind-Value="_selectedTypeTaxe" 
                                SearchFunc="@SearchTypeTaxes"
                                ToStringFunc="@(t => t == null ? string.Empty : t.Nom)"
                                AdornmentIcon="@Icons.Material.Filled.Search"
                                AdornmentColor="Color.Primary"
                                Required="true"
                                ResetValueOnEmptyText="true"
                                CoerceText="true"
                                CoerceValue="true"
                                Error="@(_fieldErrors.ContainsKey("TypeTaxe"))"
                                ErrorText="@GetFieldErrorMessage("TypeTaxe")"
                                HelperText="Sélectionnez le type de taxe applicable"
                                Immediate="true"
                                OnClearButtonClick="@(() => { _selectedTypeTaxe = null; Model.TypeTaxeId = Guid.Empty; })"
                                OnValueChanged="@OnTypeTaxeChanged">
                    <ItemTemplate Context="item">
                        <div class="d-flex flex-row align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Payments" Class="mr-2" />
                            <div>
                                <MudText Typo="Typo.body1">@item.Nom</MudText>
                                <MudText Typo="Typo.caption">Montant de base: @item.MontantBase XOF</MudText>
                            </div>
                        </div>
                    </ItemTemplate>
                </MudAutocomplete>
                
                <!-- Période de validité -->
                <div class="d-flex flex-row gap-4">
                    <MudDatePicker Label="Date de début" 
                                 @bind-Date="_dateDebut" 
                                 DateFormat="dd/MM/yyyy"
                                 Required="true"
                                 RequiredError="La date de début est requise"
                                 Error="@(_fieldErrors.ContainsKey("DateDebut"))"
                                 ErrorText="@GetFieldErrorMessage("DateDebut")"
                                 Placeholder="Sélectionnez une date"
                                 Immediate="true"
                                 HelperText="Date à partir de laquelle l'obligation devient effective" />
                    
                    <MudDatePicker Label="Date de fin" 
                                 @bind-Date="_dateFin" 
                                 DateFormat="dd/MM/yyyy"
                                 Error="@(_fieldErrors.ContainsKey("DateFin"))"
                                 ErrorText="@GetFieldErrorMessage("DateFin")"
                                 Placeholder="Optionnel"
                                 MinDate="@_dateDebut"
                                 Immediate="true"
                                 HelperText="Date d'expiration (optionnelle)" />
                </div>
                
                <!-- Informations sur le type de taxe -->
                @if (_selectedTypeTaxe != null)
                {
                    <MudPaper Elevation="0" Class="pa-4 rounded-lg" Style="background-color: var(--mud-palette-background-grey);">
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="mb-2">Détails du type de taxe</MudText>
                        <MudText Typo="Typo.body2" Class="mb-1"><b>Description:</b> @_selectedTypeTaxe.Description</MudText>
                        <MudText Typo="Typo.body2" Class="mb-1"><b>Fréquence de paiement:</b> @_selectedTypeTaxe.FrequencePaiement</MudText>
                        <MudText Typo="Typo.body2" Class="mb-1"><b>Montant de base:</b> @_selectedTypeTaxe.MontantBase XOF</MudText>
                    </MudPaper>
                }
                
                <!-- Montant personnalisé -->
                <MudNumericField T="decimal?" @bind-Value="Model.MontantPersonnalise" 
                               Label="Montant personnalisé" 
                               HelperText="Laissez vide pour utiliser le montant par défaut du type de taxe"
                               Adornment="Adornment.End"
                               AdornmentText="XOF"
                               Error="@(_fieldErrors.ContainsKey("MontantPersonnalise"))"
                               ErrorText="@GetFieldErrorMessage("MontantPersonnalise")"
                               Immediate="true"
                               Min="0" />
            </div>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text" Color="Color.Default" DisableElevation="true">Annuler</MudButton>
        <MudButton OnClick="Submit" 
                  Variant="Variant.Filled" 
                  Color="Color.Primary" 
                  Disabled="@(!_isValid || _processing)"
                  DisableElevation="true"
                  StartIcon="@Icons.Material.Filled.Save"
                  Class="ml-2">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <span class="ms-2">Traitement...</span>
            }
            else
            {
                @ButtonText
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;
    
    [Parameter] public ObligationFiscaleDto Model { get; set; } = new();
    [Parameter] public string ButtonText { get; set; } = "Enregistrer";
    [Parameter] public string DialogTitle { get; set; } = "Obligation fiscale";
    [Parameter] public EventCallback<ObligationFiscaleDto> OnValidSubmit { get; set; }

    private MudForm form;
    private bool _isValid;
    private string _errorMessage = string.Empty;
    private List<string> _validationErrors = new();
    private Dictionary<string, string> _fieldErrors = new Dictionary<string, string>();
    private bool _processing = false;
    private const string ApiVersion = "1.0";
    
    // Variables pour les sélecteurs
    private ContribuableRefDto _selectedContribuable;
    private TypeTaxeRefDto _selectedTypeTaxe;
    private DateTime? _dateDebut;
    private DateTime? _dateFin;

    protected override async Task OnInitializedAsync()
    {
        _dateDebut = Model.DateDebut;
        _dateFin = Model.DateFin;
        
        // Charger les informations du contribuable si déjà sélectionné
        if (Model.ContribuableId != Guid.Empty)
        {
            try
            {
                var contribuable = await ApiClient.GetContribuableEndPointsAsync(ApiVersion, Model.ContribuableId);
                if (contribuable != null)
                {
                    _selectedContribuable = new ContribuableRefDto
                    {
                        Id = contribuable.Id ?? Guid.Empty,
                        Nom = contribuable.Nom ?? string.Empty,
                        Prenom = contribuable.Prenom ?? string.Empty,
                        NumeroIdentification = contribuable.NumeroIdentification ?? string.Empty
                    };
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors du chargement du contribuable: {ex.Message}");
            }
        }
        
        // Charger les informations du type de taxe si déjà sélectionné
        if (Model.TypeTaxeId != Guid.Empty)
        {
            try
            {
                var typeTaxe = await ApiClient.GetTypeTaxeEndPointsAsync(ApiVersion, Model.TypeTaxeId);
                if (typeTaxe != null)
                {
                    _selectedTypeTaxe = new TypeTaxeRefDto
                    {
                        Id = typeTaxe.Id,
                        Nom = typeTaxe.Nom ?? string.Empty,
                        Description = typeTaxe.Description ?? string.Empty,
                        MontantBase = Convert.ToDecimal(typeTaxe.MontantBase),
                        FrequencePaiement = typeTaxe.FrequencePaiement ?? string.Empty
                    };
                    
                    // Mettre à jour les informations dans le modèle
                    Model.FrequencePaiement = typeTaxe.FrequencePaiement ?? string.Empty;
                    Model.Description = typeTaxe.Description ?? string.Empty;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors du chargement du type de taxe: {ex.Message}");
            }
        }
        
        // Valider le formulaire au démarrage
        _isValid = Model.ContribuableId != Guid.Empty && 
                  Model.TypeTaxeId != Guid.Empty && 
                  Model.DateDebut != default;
    }
    
    // Méthode pour rechercher des contribuables
    private async Task<IEnumerable<ContribuableRefDto>> SearchContribuables(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(value))
            return new List<ContribuableRefDto>();

        try
        {
            var searchCommand = new SearchContribuableCommand
            {
                PageNumber = 1,
                PageSize = 10,
                Keyword = value
            };
            
            var result = await ApiClient.SearchContribuableEndPointsAsync(ApiVersion, searchCommand, cancellationToken);
            
            if (result?.Items != null)
            {
                return result.Items.Select(c => new ContribuableRefDto
                {
                    Id = c.Id ?? Guid.Empty,
                    Nom = c.Nom ?? string.Empty,
                    Prenom = c.Prenom ?? string.Empty,
                    NumeroIdentification = c.NumeroIdentification ?? string.Empty
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la recherche des contribuables: {ex.Message}");
        }
        
        return new List<ContribuableRefDto>();
    }
    
    // Méthode pour rechercher des types de taxe
    private async Task<IEnumerable<TypeTaxeRefDto>> SearchTypeTaxes(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(value))
            return new List<TypeTaxeRefDto>();

        try
        {
            var searchCommand = new SearchTypeTaxesCommand
            {
                PageNumber = 1,
                PageSize = 10,
                SearchTerm = value
            };
            
            var result = await ApiClient.SearchTypeTaxeEndPointsAsync(ApiVersion, searchCommand, cancellationToken);
            
            if (result?.Items != null)
            {
                return result.Items.Select(t => new TypeTaxeRefDto
                {
                    Id = t.Id,
                    Nom = t.Nom ?? string.Empty,
                    Description = t.Description ?? string.Empty,
                    MontantBase = Convert.ToDecimal(t.MontantBase),
                    FrequencePaiement = t.FrequencePaiement ?? string.Empty
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la recherche des types de taxe: {ex.Message}");
        }
        
        return new List<TypeTaxeRefDto>();
    }
    
    // Mettre à jour le modèle quand le contribuable est sélectionné
    private void UpdateContribuable()
    {
        if (_selectedContribuable != null)
        {
            Model.ContribuableId = _selectedContribuable.Id;
            Model.NomContribuable = $"{_selectedContribuable.Nom} {_selectedContribuable.Prenom}";
        }
        else
        {
            Model.ContribuableId = Guid.Empty;
            Model.NomContribuable = string.Empty;
        }
        
        form?.Validate();
    }
    
    // Mettre à jour le modèle quand le type de taxe est sélectionné
    private void UpdateTypeTaxe()
    {
        if (_selectedTypeTaxe != null)
        {
            Model.TypeTaxeId = _selectedTypeTaxe.Id;
            Model.NomTypeTaxe = _selectedTypeTaxe.Nom;
            Model.FrequencePaiement = _selectedTypeTaxe.FrequencePaiement;
            Model.Description = _selectedTypeTaxe.Description;
            Model.MontantCalcule = Convert.ToDecimal(_selectedTypeTaxe.MontantBase);
        }
        else
        {
            Model.TypeTaxeId = Guid.Empty;
            Model.NomTypeTaxe = string.Empty;
            Model.FrequencePaiement = string.Empty;
            Model.Description = string.Empty;
            Model.MontantCalcule = 0;
        }
        
        form?.Validate();
    }
    
    // Mettre à jour le modèle quand le type de taxe est modifié
    private void OnTypeTaxeChanged(TypeTaxeRefDto typeTaxe)
    {
        _selectedTypeTaxe = typeTaxe;
        UpdateTypeTaxe();
    }
    
    // Validation du formulaire
    private string ValidateForm(ObligationFiscaleDto model)
    {
        _isValid = true;
        _errorMessage = string.Empty;
        
        if (model.ContribuableId == Guid.Empty)
        {
            _isValid = false;
            return "Le contribuable est requis";
        }
        
        if (model.TypeTaxeId == Guid.Empty)
        {
            _isValid = false;
            return "Le type de taxe est requis";
        }
        
        if (_dateDebut == null)
        {
            _isValid = false;
            return "La date de début est requise";
        }
        
        if (_dateFin.HasValue && _dateFin.Value < _dateDebut.Value)
        {
            _isValid = false;
            return "La date de fin doit être postérieure à la date de début";
        }
        
        // Mettre à jour les dates dans le modèle
        if (_dateDebut.HasValue)
            model.DateDebut = _dateDebut.Value;
            
        model.DateFin = _dateFin;
        
        return string.Empty;
    }
    
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    
    private async Task Submit()
    {
        ClearErrors();
        
        var validationResult = ValidateForm(Model);
        if (!string.IsNullOrEmpty(validationResult))
        {
            _errorMessage = validationResult;
            return;
        }
        
        if (_isValid)
        {
            try
            {
                _processing = true;
                
                if (OnValidSubmit.HasDelegate)
                {
                    try 
                    {
                        await OnValidSubmit.InvokeAsync(Model);
                        // Si on arrive ici, c'est que l'opération a réussi, on ferme le dialogue
                        MudDialog.Close(DialogResult.Ok(Model));
                    }
                    catch (ApiException ex)
                    {
                        // On capture l'exception et on affiche l'erreur dans le dialogue
                        Console.WriteLine($"Erreur lors de la soumission du formulaire: {ex.Message}");
                        
                        // Essayer de parser les erreurs de validation spécifiques aux champs
                        if (ex.Response != null)
                        {
                            try
                            {
                                var jsonDoc = System.Text.Json.JsonDocument.Parse(ex.Response);
                                if (jsonDoc.RootElement.TryGetProperty("errors", out var errorsElement))
                                {
                                    if (errorsElement.ValueKind == System.Text.Json.JsonValueKind.Object)
                                    {
                                        foreach (var error in errorsElement.EnumerateObject())
                                        {
                                            var fieldName = error.Name;
                                            var errorMessages = new List<string>();
                                            
                                            if (error.Value.ValueKind == System.Text.Json.JsonValueKind.Array)
                                            {
                                                foreach (var errorItem in error.Value.EnumerateArray())
                                                {
                                                    errorMessages.Add(errorItem.GetString() ?? string.Empty);
                                                }
                                            }
                                            
                                            if (errorMessages.Count > 0)
                                            {
                                                _fieldErrors[fieldName] = string.Join(", ", errorMessages);
                                            }
                                        }
                                    }
                                    else if (errorsElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                                    {
                                        foreach (var error in errorsElement.EnumerateArray())
                                        {
                                            if (error.ValueKind == System.Text.Json.JsonValueKind.String)
                                            {
                                                _validationErrors.Add(error.GetString() ?? string.Empty);
                                            }
                                        }
                                    }
                                }
                                
                                if (_validationErrors.Count == 0 && _fieldErrors.Count == 0)
                                {
                                    // Message d'erreur générique si nous ne pouvons pas extraire des erreurs spécifiques
                                    _errorMessage = "Veuillez vérifier les informations saisies.";
                                }
                            }
                            catch (System.Text.Json.JsonException)
                            {
                                // En cas d'erreur de parsing, utiliser un message générique
                                _errorMessage = "Une erreur s'est produite lors de la validation des données.";
                            }
                        }
                        else
                        {
                            // Message d'erreur basé sur le message d'exception
                            if (ex.Message.Contains("duplicate key"))
                            {
                                _errorMessage = "Une obligation fiscale similaire existe déjà pour ce contribuable.";
                            }
                            else if (ex.Message.Contains("validation"))
                            {
                                _errorMessage = "Veuillez vérifier les informations saisies.";
                            }
                            else
                            {
                                _errorMessage = "Une erreur s'est produite lors de l'enregistrement.";
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        // Autres types d'exceptions
                        _errorMessage = "Une erreur inattendue s'est produite.";
                        Console.WriteLine($"Exception non gérée: {ex.Message}");
                    }
                }
                else
                {
                    // Si pas de callback, on ferme simplement le dialogue avec succès
                    MudDialog.Close(DialogResult.Ok(Model));
                }
            }
            finally
            {
                _processing = false;
            }
        }
    }
    
    private string GetFieldErrorMessage(string fieldName)
    {
        return _fieldErrors.TryGetValue(fieldName, out var message) ? message : string.Empty;
    }
    
    private void ClearErrors()
    {
        _errorMessage = string.Empty;
        _validationErrors.Clear();
        _fieldErrors.Clear();
    }
} 