@page "/parametres/localisation/regions"
@using MudBlazor
@using PayCom.Blazor.Client.Shared
@using PayCom.Blazor.Client.Pages.Parametres.Localisation.Dialogs
@using PayCom.Blazor.Client.Components
@using PayCom.Blazor.Infrastructure.Api
@using Microsoft.AspNetCore.Components

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager

<PageTitle>Liste des Régions - PayCom</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="3" Class="pa-4 mb-4 rounded-lg">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.LocationCity" Color="Color.Primary" Size="Size.Large" Class="mr-2" />
                <MudText Typo="Typo.h4" Color="Color.Primary">Gestion des régions</MudText>
            </MudStack>
            <MudButton OnClick="OpenDialog" 
                      Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Add" 
                      Size="Size.Medium" 
                      Class="rounded-lg px-4">
                Ajouter une région
            </MudButton>
        </MudStack>

        <MudDivider Class="mb-4" />

        <MudPaper Elevation="0" Class="pa-4 rounded-lg" Style="background-color: var(--mud-palette-background-grey)">
            <MudTable Items="@_regions" 
                     Loading="@_loading" 
                     LoadingProgressColor="Color.Primary" 
                     Hover="true" 
                     Striped="true" 
                     Elevation="0"
                     Breakpoint="Breakpoint.Sm" 
                     OnRowClick="@((e) => EditRegion(e.Item))"
                     Filter="new Func<RegionDto, bool>(FilterRegions)"
                     T="RegionDto"
                     Dense="true"
                     Class="rounded-lg">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="mud-text-secondary">Liste des régions</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" 
                                Placeholder="Rechercher une région..." 
                                Adornment="Adornment.Start" 
                                AdornmentIcon="@Icons.Material.Filled.Search" 
                                IconSize="Size.Medium" 
                                Immediate="true"
                                Variant="Variant.Outlined"
                                Class="mt-0 ml-2" 
                                Style="width: 300px"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<RegionDto, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<RegionDto, object>(x => x.Code)">Code</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<RegionDto, object>(x => x.Nom)">Nom</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<RegionDto, object>(x => x.Id)">Date de création</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align: center">Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Code">
                        @if (!string.IsNullOrEmpty(context.Code))
                        {
                            <MudChip Color="Color.Secondary" T="string" Size="Size.Small" Text="@context.Code" />
                        }
                        else
                        {
                            <MudText Typo="Typo.caption" Class="mud-text-disabled">Non défini</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Nom">@context.Nom</MudTd>
                    <MudTd DataLabel="Date de création">
                        <MudTooltip Text="@context.CreatedOn.ToString()">
                            <MudText>@context.CreatedOn.ToString("dd/MM/yyyy HH:mm")</MudText>
                        </MudTooltip>
                    </MudTd>
                    <MudTd Style="text-align: center">
                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudTooltip Text="Modifier cette région">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                              Color="Color.Primary" 
                                              Size="Size.Small" 
                                              OnClick="@(() => EditRegion(context))" 
                                              Class="ma-1" />
                            </MudTooltip>
                            <MudTooltip Text="Supprimer cette région">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                              Color="Color.Error" 
                                              Size="Size.Small" 
                                              OnClick="() => ShowDeleteConfirmation(context)" 
                                              Class="ma-1" />
                            </MudTooltip>
                        </MudStack>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.SearchOff" Color="Color.Secondary" Size="Size.Large" />
                        <MudText Typo="Typo.subtitle1">Aucune région trouvée</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">Essayez de modifier vos critères de recherche ou ajoutez une nouvelle région.</MudText>
                    </MudStack>
                </NoRecordsContent>
                <LoadingContent>
                    <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                        <MudText Typo="Typo.subtitle1">Chargement des régions...</MudText>
                    </MudStack>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private List<RegionDto> _regions = new();
    private bool _loading = true;
    private string _searchString = "";
    private const string ApiVersion = "1.0";
    private RegionDialog _regionDialog;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            
            // Appel à l'API pour récupérer les régions
            var result = await ApiHelper.ExecuteCallGuardedAsync(
                async () =>
                {
                    var searchCommand = new SearchRegionsCommand
                    {
                        PageNumber = 1,
                        PageSize = 50,
                        OrderBy = new List<string> { "Nom" }
                    };
                    
                    return await ApiClient.SearchRegionEndPointsAsync(ApiVersion, searchCommand);
                },
                Snackbar,
                NavigationManager);

            if (result?.Items != null)
            {
                _regions = result.Items.Select(r => new RegionDto
                {
                    Id = r.Id,
                    Code = r.Code ?? string.Empty,
                    Nom = r.Nom ?? string.Empty,
                    // Nous n'avons pas le nombre de préfectures dans la réponse de l'API,
                    // nous le mettrons à 0 par défaut
                    NombrePrefectures = 0,
                    CreatedOn = DateTime.Now // Utiliser la date actuelle au lieu de r.CreatedOn qui n'existe pas
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des régions: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private bool FilterRegions(RegionDto region)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return region.Nom.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               (region.Code?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
               region.Id.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { 
            CloseButton = false, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = false,
            BackdropClick = false
        };
        var parameters = new DialogParameters();
        parameters.Add("Model", new RegionDialog.RegionDto());
        parameters.Add("DialogTitle", "Nouvelle Région");
        parameters.Add("ButtonText", "Ajouter");
        parameters.Add("OnValidSubmit", EventCallback.Factory.Create<RegionDialog.RegionDto>(this, SaveRegion));

        var dialogReference = await DialogService.ShowAsync<RegionDialog>("Nouvelle Région", parameters, options);
        // Récupérer l'instance du dialogue pour pouvoir y accéder plus tard
        if (dialogReference.Dialog is RegionDialog dialog)
        {
            _regionDialog = dialog;
        }
    }
    
    private async Task SaveRegion(RegionDialog.RegionDto region)
    {
        try
        {
            // Appel à l'API pour créer la région
            var command = new CreateRegionCommand
            {
                Nom = region.Nom,
                Code = region.Code
            };
            
            try
            {
                // Appel direct à l'API sans passer par ApiHelper pour récupérer les détails de l'erreur
                await ApiClient.CreateRegionEndPointsAsync(ApiVersion, command);
                
                // Si l'appel réussit, recharger les données et fermer le dialogue
                await LoadData();
                Snackbar.Add("Région ajoutée avec succès", Severity.Success);
                
                // Fermer le dialogue seulement en cas de succès
                if (_regionDialog != null)
                {
                    _regionDialog.MudDialog?.Close(DialogResult.Ok(region));
                }
            }
            catch (ApiException ex)
            {
                // Utiliser la nouvelle méthode ParseApiErrors pour analyser l'erreur
                if (_regionDialog != null && !string.IsNullOrEmpty(ex.Response))
                {
                    _regionDialog.ParseApiErrors(ex.Response);
                }
                else
                {
                    // Extraire un message d'erreur convivial
                    string errorMessage = "Erreur lors de l'ajout de la région";
                    
                    if (ex.StatusCode == 400)
                    {
                        errorMessage = "Veuillez vérifier les informations saisies";
                    }
                    else if (ex.StatusCode == 409)
                    {
                        errorMessage = "Une région avec ce code ou ce nom existe déjà";
                    }
                    
                    if (_regionDialog != null)
                    {
                        _regionDialog.SetError(errorMessage);
                    }
                    else
                    {
                        Snackbar.Add(errorMessage, Severity.Error);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Extraire un message d'erreur convivial
            string errorMessage = "Erreur lors de l'ajout de la région";
            var fieldErrors = new Dictionary<string, ICollection<string>>();
            
            if (ex.Message.Contains("duplicate key"))
            {
                errorMessage = "Une région avec ce code ou ce nom existe déjà";
                // Ajouter des erreurs spécifiques aux champs potentiellement concernés
                fieldErrors.Add("Code", new List<string> { "Ce code est peut-être déjà utilisé" });
                fieldErrors.Add("Nom", new List<string> { "Ce nom est peut-être déjà utilisé" });
            }
            else if (ex.Message.Contains("validation"))
            {
                errorMessage = "Veuillez vérifier les informations saisies";
            }
            
            // Afficher l'erreur dans le dialogue plutôt que dans le Snackbar
            if (_regionDialog != null)
            {
                _regionDialog.SetError(errorMessage);
                
                // Afficher les erreurs par champ si disponibles
                if (fieldErrors.Count > 0)
                {
                    _regionDialog.SetFieldErrors(fieldErrors);
                }
            }
            else
            {
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
    }

    private async Task EditRegion(RegionDto region)
    {
        var options = new DialogOptions { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = false,
            BackdropClick = false
        };
        var regionDto = new RegionDialog.RegionDto
        {
            Id = region.Id,
            Code = region.Code,
            Nom = region.Nom,
        };
        
        var parameters = new DialogParameters();
        parameters.Add("Model", regionDto);
        parameters.Add("DialogTitle", "Modifier la région");
        parameters.Add("ButtonText", "Mettre à jour");
        parameters.Add("OnValidSubmit", EventCallback.Factory.Create<RegionDialog.RegionDto>(this, SaveEditedRegion));

        var dialogReference = await DialogService.ShowAsync<RegionDialog>("Modifier la région", parameters, options);
        // Récupérer l'instance du dialogue pour pouvoir y accéder plus tard
        if (dialogReference.Dialog is RegionDialog dialog)
        {
            _regionDialog = dialog;
        }
    }
    
    private async Task SaveEditedRegion(RegionDialog.RegionDto region)
    {
        try
        {
            // Appel à l'API pour mettre à jour la région
            var command = new UpdateRegionCommand
            {
                Id = region.Id,
                Nom = region.Nom,
                Code = region.Code
            };
            
            try
            {
                // Appel direct à l'API sans passer par ApiHelper pour récupérer les détails de l'erreur
                await ApiClient.UpdateRegionEndPointsAsync(ApiVersion, region.Id, command);
                
                // Si l'appel réussit, recharger les données et fermer le dialogue
                await LoadData();
                Snackbar.Add("Région mise à jour avec succès", Severity.Success);
                
                // Fermer le dialogue seulement en cas de succès
                if (_regionDialog != null)
                {
                    _regionDialog.MudDialog?.Close(DialogResult.Ok(region));
                }
            }
            catch (ApiException ex)
            {
                // Utiliser la nouvelle méthode ParseApiErrors pour analyser l'erreur
                if (_regionDialog != null && !string.IsNullOrEmpty(ex.Response))
                {
                    _regionDialog.ParseApiErrors(ex.Response);
                }
                else
                {
                    // Extraire un message d'erreur convivial
                    string errorMessage = "Erreur lors de la mise à jour de la région";
                    
                    if (ex.StatusCode == 400)
                    {
                        errorMessage = "Veuillez vérifier les informations saisies";
                    }
                    else if (ex.StatusCode == 409)
                    {
                        errorMessage = "Une région avec ce code ou ce nom existe déjà";
                    }
                    
                    if (_regionDialog != null)
                    {
                        _regionDialog.SetError(errorMessage);
                    }
                    else
                    {
                        Snackbar.Add(errorMessage, Severity.Error);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Extraire un message d'erreur convivial
            string errorMessage = "Erreur lors de la mise à jour de la région";
            var fieldErrors = new Dictionary<string, ICollection<string>>();
            
            if (ex.Message.Contains("duplicate key"))
            {
                errorMessage = "Une région avec ce code ou ce nom existe déjà";
                // Ajouter des erreurs spécifiques aux champs potentiellement concernés
                fieldErrors.Add("Code", new List<string> { "Ce code est peut-être déjà utilisé" });
                fieldErrors.Add("Nom", new List<string> { "Ce nom est peut-être déjà utilisé" });
            }
            else if (ex.Message.Contains("validation"))
            {
                errorMessage = "Veuillez vérifier les informations saisies";
            }
            
            // Afficher l'erreur dans le dialogue plutôt que dans le Snackbar
            if (_regionDialog != null)
            {
                _regionDialog.SetError(errorMessage);
                
                // Afficher les erreurs par champ si disponibles
                if (fieldErrors.Count > 0)
                {
                    _regionDialog.SetFieldErrors(fieldErrors);
                }
            }
            else
            {
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
    }

    private async Task ShowDeleteConfirmation(RegionDto region)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Êtes-vous sûr de vouloir supprimer la région '{region.Nom}' ?");
        parameters.Add("ButtonText", "Supprimer");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Components.ConfirmDialog>("Confirmation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool confirmed && confirmed)
        {
            await DeleteRegion(region);
        }
    }
    
    private async Task DeleteRegion(RegionDto region)
    {
        try
        {
            // Appel à l'API pour supprimer la région
            var success = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                async () =>
                {
                    await ApiClient.DeleteRegionEndPointsAsync(ApiVersion, region.Id);
                    return true;
                },
                Snackbar,
                NavigationManager,
                null,
                "Région supprimée avec succès");
            
            if (success)
            {
                await LoadData(); // Recharger les données depuis l'API
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de la suppression de la région: {ex.Message}", Severity.Error);
        }
    }

    public class RegionDto
    {
        public Guid Id { get; set; }
        public string Code { get; set; } = string.Empty;
        public string Nom { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int NombrePrefectures { get; set; }
        public DateTime CreatedOn { get; set; } = DateTime.Now;
    }
}
