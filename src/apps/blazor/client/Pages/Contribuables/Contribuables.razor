@page "/contribuables/liste"
@using MudBlazor
@using PayCom.Blazor.Client.Shared
@using PayCom.Blazor.Client.Pages.Contribuables.Dialogs
@using PayCom.Blazor.Client.Components
@using PayCom.Blazor.Infrastructure.Api
@using Microsoft.AspNetCore.Components
@using PayCom.Blazor.Client.Pages.Contribuables.Models
@using static PayCom.Blazor.Client.Pages.Contribuables.Models.EnumExtensions

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager

<PageTitle>Liste des Contribuables - PayCom</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="3" Class="pa-4 mb-4 rounded-lg">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Primary" Size="Size.Large" Class="mr-2" />
                <MudText Typo="Typo.h4" Color="Color.Primary">Gestion des contribuables</MudText>
            </MudStack>
            <MudButton OnClick="OpenDialog" 
                      Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Add" 
                      Size="Size.Medium" 
                      Class="rounded-lg px-4">
                Ajouter un contribuable
            </MudButton>
        </MudStack>

        <MudDivider Class="mb-4" />

        <MudPaper Elevation="0" Class="pa-4 rounded-lg" Style="background-color: var(--mud-palette-background-grey)">
            <MudTable Items="@_contribuables" 
                     Loading="@_loading" 
                     LoadingProgressColor="Color.Primary" 
                     Hover="true" 
                     Striped="true" 
                     Elevation="0"
                     Breakpoint="Breakpoint.Sm" 
                     OnRowClick="@((e) => EditContribuable(e.Item))"
                     Filter="new Func<ContribuableDto, bool>(FilterContribuables)"
                     T="ContribuableDto"
                     Dense="true"
                     Class="rounded-lg">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="mud-text-secondary">Liste des contribuables</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" 
                                Placeholder="Rechercher un contribuable..." 
                                Adornment="Adornment.Start" 
                                AdornmentIcon="@Icons.Material.Filled.Search" 
                                IconSize="Size.Medium" 
                                Immediate="true"
                                Variant="Variant.Outlined"
                                Class="mt-0 ml-2" 
                                Style="width: 300px"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.NumeroIdentification)">N° Identification</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.Nom)">Nom</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.Prenom)">Prénom</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.TypeActivite)">Type d'activité</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.Statut)">Statut</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.DateEnregistrement)">Date d'enregistrement</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align: center">Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="N° Identification">
                        @if (!string.IsNullOrEmpty(context.NumeroIdentification))
                        {
                            <MudChip Color="Color.Secondary" T="string" Size="Size.Small" Text="@context.NumeroIdentification" />
                        }
                        else
                        {
                            <MudText Typo="Typo.caption" Class="mud-text-disabled">Non défini</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Nom">@context.Nom</MudTd>
                    <MudTd DataLabel="Prénom">@context.Prenom</MudTd>
                    <MudTd DataLabel="Type d'activité">@context.TypeActivite</MudTd>
                    <MudTd DataLabel="Statut">
                        @switch (context.Statut)
                        {
                            case StatutContribuableType.Actif:
                                <MudChip Color="Color.Success" T="string" Size="Size.Small">Actif</MudChip>
                                break;
                            case StatutContribuableType.Inactif:
                                <MudChip Color="Color.Error" T="string" Size="Size.Small">Inactif</MudChip>
                                break;
                            case StatutContribuableType.EnAttente:
                                <MudChip Color="Color.Warning" T="string" Size="Size.Small">En attente</MudChip>
                                break;
                            default:
                                <MudChip Color="Color.Default" T="string" Size="Size.Small">Inconnu</MudChip>
                                break;
                        }
                    </MudTd>
                    <MudTd DataLabel="Date d'enregistrement">
                        <MudTooltip Text="@context.DateEnregistrement.ToString()">
                            <MudText>@context.DateEnregistrement.ToString()</MudText>
                        </MudTooltip>
                    </MudTd>
                    <MudTd Style="text-align: center">
                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudTooltip Text="Modifier ce contribuable">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                              Color="Color.Primary" 
                                              Size="Size.Small" 
                                              OnClick="@(() => EditContribuable(context))" 
                                              Class="ma-1" />
                            </MudTooltip>
                            <MudTooltip Text="Supprimer ce contribuable">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                              Color="Color.Error" 
                                              Size="Size.Small" 
                                              OnClick="() => ShowDeleteConfirmation(context)" 
                                              Class="ma-1" />
                            </MudTooltip>
                        </MudStack>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.SearchOff" Color="Color.Secondary" Size="Size.Large" />
                        <MudText Typo="Typo.subtitle1">Aucun contribuable trouvé</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">Essayez de modifier vos critères de recherche ou ajoutez un nouveau contribuable.</MudText>
                    </MudStack>
                </NoRecordsContent>
                <LoadingContent>
                    <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                        <MudText Typo="Typo.subtitle1">Chargement des contribuables...</MudText>
                    </MudStack>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private List<ContribuableDto> _contribuables = new();
    private bool _loading = true;
    private string _searchString = "";
    private const string ApiVersion = "1.0";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            Console.WriteLine("Chargement des données des contribuables...");
            
            // Appel à l'API pour récupérer les contribuables
            var result = await ApiHelper.ExecuteCallGuardedAsync(
                async () =>
                {
                    try
                    {
                        var searchCommand = new SearchContribuableCommand
                        {
                            PageNumber = 1,
                            PageSize = 50,
                            OrderBy = new List<string> { "Nom" }
                        };
                        
                        Console.WriteLine("Exécution de la recherche des contribuables avec commande: " +
                                        $"PageNumber={searchCommand.PageNumber}, " +
                                        $"PageSize={searchCommand.PageSize}");
                        
                        var response = await ApiClient.SearchContribuableEndPointsAsync(ApiVersion, searchCommand);
                        Console.WriteLine($"Recherche réussie. Nombre d'éléments récupérés: {response?.Items?.Count ?? 0}");
                        return response;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Erreur lors de la recherche des contribuables: {ex.Message}");
                        Console.WriteLine($"StackTrace: {ex.StackTrace}");
                        if (ex.InnerException != null)
                        {
                            Console.WriteLine($"InnerException: {ex.InnerException.Message}");
                        }
                        throw;
                    }
                },
                Snackbar,
                NavigationManager);

            if (result?.Items != null)
            {
                _contribuables = result.Items.Select(c => new ContribuableDto
                {
                    Id = c.Id ?? Guid.Empty,
                    Nom = c.Nom ?? string.Empty,
                    Prenom = c.Prenom ?? string.Empty,
                    NumeroIdentification = c.NumeroIdentification ?? string.Empty,
                    DateNaissance = c.DateNaissance,
                    Genre = MapGenre(c.Genre),
                    NomCommercial = c.NomCommercial ?? string.Empty,
                    Adresse = c.Adresse ?? string.Empty,
                    LocalisationGPS = c.LocalisationGPS ?? string.Empty,
                    TypeActivite = c.TypeActivite ?? string.Empty,
                    ContactPrincipal = c.ContactPrincipal ?? string.Empty,
                    ContactSecondaire = c.ContactSecondaire ?? string.Empty,
                    DateEnregistrement = c.DateEnregistrement,
                    Statut = MapStatut(c.Statut)
                }).ToList();
                
                Console.WriteLine($"Données transformées. Nombre de contribuables chargés: {_contribuables.Count}");
            }
            else
            {
                Console.WriteLine("Aucun résultat retourné par l'API ou résultat null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception lors du chargement des contribuables: {ex.GetType().Name}");
            Console.WriteLine($"Message: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            
            if (ex.InnerException != null)
            {
                Console.WriteLine($"InnerException: {ex.InnerException.Message}");
                Console.WriteLine($"InnerException StackTrace: {ex.InnerException.StackTrace}");
            }
            
            Snackbar.Add($"Erreur lors du chargement des contribuables: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            Console.WriteLine("Chargement des contribuables terminé");
        }
    }

    private bool FilterContribuables(ContribuableDto contribuable)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return contribuable.Nom.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               contribuable.Prenom.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               contribuable.NumeroIdentification.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               contribuable.TypeActivite.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               contribuable.Id.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { 
            CloseButton = false, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };
        var parameters = new DialogParameters();
        parameters.Add("Model", new ContribuableDto());
        parameters.Add("DialogTitle", "Nouveau Contribuable");
        parameters.Add("ButtonText", "Ajouter");
        parameters.Add("OnValidSubmit", new Func<ContribuableDto, Task<bool>>(SaveNewContribuable));

        await DialogService.ShowAsync<ContribuableDialog>("Nouveau Contribuable", parameters, options);
    }
    
    private async Task<bool> SaveNewContribuable(ContribuableDto contribuable)
    {
        try
        {
            Console.WriteLine($"Tentative d'ajout d'un nouveau contribuable: {contribuable.Nom} {contribuable.Prenom}");
            Console.WriteLine($"TypeContribuable: {contribuable.TypeContribuable} (valeur: {(int)contribuable.TypeContribuable})");
            Console.WriteLine($"Statut: {contribuable.Statut} (valeur: {(int)contribuable.Statut})");
            Console.WriteLine($"Genre: {contribuable.Genre} (valeur: {(int)(contribuable.Genre ?? GenreType.Homme)})");
            Console.WriteLine($"Date d'enregistrement: {contribuable.DateEnregistrement}");
            
            // Création d'un objet command en utilisant des propriétés
            var command = new CreateContribuableCommand();
            
            // Personne physique
            command.Nom = contribuable.Nom;
            command.Prenom = contribuable.Prenom;
            command.DateNaissance = contribuable.DateNaissance ?? DateTime.Now;
            
            // Forcer une valeur pour Genre
            var genre = contribuable.Genre.HasValue ? MapToApiGenre(contribuable.Genre.Value) : PayCom.Blazor.Infrastructure.Api.Genre._0;
            command.Genre = genre;
            Console.WriteLine($"Genre mappé: {genre}");
            
            // Personne morale
            command.NumeroRegistreCommerce = contribuable.RCCM ?? string.Empty;
            command.Nif = contribuable.NIF ?? string.Empty;
            command.DateCreationEntreprise = contribuable.DateCreationEntreprise;
            command.SecteurActivite = contribuable.SecteurActivite ?? string.Empty;
            
            // Conversion du CapitalSocial de decimal? à double?
            if (contribuable.CapitalSocial.HasValue)
            {
                command.CapitalSocial = (double)contribuable.CapitalSocial.Value;
            }
            
            command.FormeJuridique = contribuable.FormeJuridique ?? string.Empty;
            command.RepresentantLegal = contribuable.RepresentantLegal ?? string.Empty;
            
            // Champs communs
            command.NumeroIdentification = contribuable.NumeroIdentification;
            command.NomCommercial = contribuable.NomCommercial ?? string.Empty;
            command.Adresse = contribuable.Adresse;
            command.LocalisationGPS = contribuable.LocalisationGPS ?? string.Empty;
            command.TypeActivite = contribuable.TypeActivite;
            command.ContactPrincipal = contribuable.ContactPrincipal;
            command.ContactSecondaire = contribuable.ContactSecondaire ?? string.Empty;
            command.Email = contribuable.Email ?? string.Empty;
            command.DateEnregistrement = contribuable.DateEnregistrement == default ? DateTime.Now : contribuable.DateEnregistrement;
            command.UtilisateurId = contribuable.UtilisateurId;
            command.AgentFiscalId = contribuable.AgentFiscalId;
            
            // Forcer explicitement les valeurs des énumérations
            var typeContribuable = MapToApiTypeContribuable(contribuable.TypeContribuable == default ? TypeContribuableType.PersonnePhysique : contribuable.TypeContribuable);
            command.TypeContribuable = typeContribuable;
            Console.WriteLine($"TypeContribuable mappé: {typeContribuable}");
            
            // S'assurer que Statut est défini correctement
            var statut = MapToApiStatut(contribuable.Statut == default ? StatutContribuableType.Actif : contribuable.Statut);
            command.Statut = statut;
            Console.WriteLine($"Statut mappé: {statut}");
            
            var apiSuccess = false;
            try
            {
                apiSuccess = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                    async () =>
                    {
                        try
                        {
                            await ApiClient.CreateContribuableEndPointsAsync(ApiVersion, command);
                            Console.WriteLine("Appel API réussi pour la création du contribuable");
                            return true;
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Erreur lors de l'appel API: {ex.Message}");
                            Console.WriteLine($"StackTrace: {ex.StackTrace}");
                            if (ex.InnerException != null)
                            {
                                Console.WriteLine($"InnerException: {ex.InnerException.Message}");
                            }
                            throw;
                        }
                    },
                    Snackbar, // Utiliser Snackbar ici
                    NavigationManager, // Utiliser NavigationManager ici
                    null,
                    null); // Ne pas afficher de message de succès ici
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception durant l'API call: {ex.Message}");
                // On relance l'exception pour qu'elle soit traitée par le dialogue
                throw;
            }
            
            if (apiSuccess)
            {
                await LoadData(); // Recharger les données depuis l'API
                Snackbar.Add("Contribuable ajouté avec succès", Severity.Success);
                Console.WriteLine("Contribuable ajouté avec succès et données rechargées");
                
                // Retourner vrai pour indiquer le succès
                return true;
            }
            else
            {
                throw new Exception("L'opération a échoué pour une raison inconnue");
            }
        }
        catch (Exception ex)
        {
            // Extraire un message d'erreur convivial
            string errorMessage = "Erreur lors de l'ajout du contribuable";
            
            Console.WriteLine($"Exception détectée: {ex.GetType().Name}");
            Console.WriteLine($"Message: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            
            if (ex.InnerException != null)
            {
                Console.WriteLine($"InnerException: {ex.InnerException.Message}");
                Console.WriteLine($"InnerException StackTrace: {ex.InnerException.StackTrace}");
            }
            
            if (ex.Message.Contains("duplicate key"))
            {
                errorMessage = "Un contribuable avec ce numéro d'identification existe déjà";
                Console.WriteLine("Erreur détectée: clé dupliquée");
            }
            else if (ex.Message.Contains("validation"))
            {
                errorMessage = "Veuillez vérifier les informations saisies";
                Console.WriteLine("Erreur détectée: erreur de validation");
            }
            
            Snackbar.Add(errorMessage, Severity.Error);
            
            // Retourner faux pour indiquer l'échec
            return false;
        }
    }

    private async Task EditContribuable(ContribuableDto contribuable)
    {
        var options = new DialogOptions { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };
        
        var parameters = new DialogParameters();
        parameters.Add("Model", contribuable);
        parameters.Add("DialogTitle", "Modifier le contribuable");
        parameters.Add("ButtonText", "Mettre à jour");
        parameters.Add("OnValidSubmit", new Func<ContribuableDto, Task<bool>>(SaveEditedContribuable));

        await DialogService.ShowAsync<ContribuableDialog>("Modifier le contribuable", parameters, options);
    }
    
    private async Task<bool> SaveEditedContribuable(ContribuableDto contribuable)
    {
        try
        {
            Console.WriteLine($"Tentative de mise à jour du contribuable: {contribuable.Id} - {contribuable.Nom} {contribuable.Prenom}");
            Console.WriteLine($"TypeContribuable: {contribuable.TypeContribuable} (valeur: {(int)contribuable.TypeContribuable})");
            Console.WriteLine($"Statut: {contribuable.Statut} (valeur: {(int)contribuable.Statut})");
            Console.WriteLine($"Genre: {contribuable.Genre} (valeur: {(int)(contribuable.Genre ?? GenreType.Homme)})");
            Console.WriteLine($"Date d'enregistrement: {contribuable.DateEnregistrement}");
            
            // Création d'un objet command en utilisant des propriétés
            var command = new UpdateContribuableCommand();
            
            // Identifiant
            command.Id = contribuable.Id;
            
            // Personne physique
            command.Nom = contribuable.Nom;
            command.Prenom = contribuable.Prenom;
            command.DateNaissance = contribuable.DateNaissance ?? DateTime.Now;
            
            // Forcer une valeur pour Genre
            var genre = contribuable.Genre.HasValue ? MapToApiGenre(contribuable.Genre.Value) : PayCom.Blazor.Infrastructure.Api.Genre._0;
            command.Genre = genre;
            Console.WriteLine($"Genre mappé: {genre}");
            
            // Personne morale
            command.NumeroRegistreCommerce = contribuable.RCCM ?? string.Empty;
            command.Nif = contribuable.NIF ?? string.Empty;
            command.DateCreationEntreprise = contribuable.DateCreationEntreprise;
            command.SecteurActivite = contribuable.SecteurActivite ?? string.Empty;
            
            // Conversion du CapitalSocial de decimal? à double?
            if (contribuable.CapitalSocial.HasValue)
            {
                command.CapitalSocial = (double)contribuable.CapitalSocial.Value;
            }
            
            command.FormeJuridique = contribuable.FormeJuridique ?? string.Empty;
            command.RepresentantLegal = contribuable.RepresentantLegal ?? string.Empty;
            
            // Champs communs
            command.NumeroIdentification = contribuable.NumeroIdentification;
            command.NomCommercial = contribuable.NomCommercial ?? string.Empty;
            command.Adresse = contribuable.Adresse;
            command.LocalisationGPS = contribuable.LocalisationGPS ?? string.Empty;
            command.TypeActivite = contribuable.TypeActivite;
            command.ContactPrincipal = contribuable.ContactPrincipal;
            command.ContactSecondaire = contribuable.ContactSecondaire ?? string.Empty;
            command.Email = contribuable.Email ?? string.Empty;
            command.DateEnregistrement = contribuable.DateEnregistrement == default ? DateTime.Now : contribuable.DateEnregistrement;
            command.UtilisateurId = contribuable.UtilisateurId;
            command.AgentFiscalId = contribuable.AgentFiscalId;
            
            // Forcer explicitement les valeurs des énumérations
            var typeContribuable = MapToApiTypeContribuable(contribuable.TypeContribuable == default ? TypeContribuableType.PersonnePhysique : contribuable.TypeContribuable);
            command.TypeContribuable = typeContribuable;
            Console.WriteLine($"TypeContribuable mappé: {typeContribuable}");
            
            // S'assurer que Statut est défini correctement
            var statut = MapToApiStatut(contribuable.Statut == default ? StatutContribuableType.Actif : contribuable.Statut);
            command.Statut = statut;
            Console.WriteLine($"Statut mappé: {statut}");
            
            var response = await ApiClient.UpdateContribuableEndPointsAsync(ApiVersion, contribuable.Id, command);
            
            if (response != null)
            {
                await LoadData();
                Snackbar.Add("Contribuable mis à jour avec succès", Severity.Success);
                
                // Retourner vrai pour indiquer le succès
                return true;
            }
            
            // Si on arrive ici, c'est que la réponse est null
            return false;
        }
        catch (ApiException ex)
        {
            var errorMessage = "Erreur lors de la mise à jour du contribuable";
            
            if (ex.StatusCode == 400)
            {
                errorMessage = "Veuillez vérifier les informations saisies";
            }
            else if (ex.StatusCode == 409)
            {
                errorMessage = "Un contribuable avec ce numéro d'identification existe déjà";
            }
            
            Snackbar.Add(errorMessage, Severity.Error);
            
            // Retourner faux pour indiquer l'échec
            return false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de la mise à jour du contribuable: {ex.Message}", Severity.Error);
            
            // Retourner faux pour indiquer l'échec
            return false;
        }
    }

    private async Task ShowDeleteConfirmation(ContribuableDto contribuable)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Êtes-vous sûr de vouloir supprimer le contribuable '{contribuable.Nom} {contribuable.Prenom}' ?");
        parameters.Add("ButtonText", "Supprimer");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Components.ConfirmDialog>("Confirmation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool confirmed && confirmed)
        {
            await DeleteContribuable(contribuable);
        }
    }
    
    private async Task DeleteContribuable(ContribuableDto contribuable)
    {
        try
        {
            Console.WriteLine($"Tentative de suppression du contribuable: {contribuable.Id} - {contribuable.Nom} {contribuable.Prenom}");
            
            // Appel à l'API pour supprimer le contribuable
            var success = await ApiHelper.ExecuteCallGuardedAsync<bool>(
                async () =>
                {
                    try
                    {
                        await ApiClient.DeleteContribuableEndPointsAsync(ApiVersion, contribuable.Id);
                        Console.WriteLine("Appel API réussi pour la suppression du contribuable");
                        return true;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Erreur lors de l'appel API de suppression: {ex.Message}");
                        Console.WriteLine($"StackTrace: {ex.StackTrace}");
                        if (ex.InnerException != null)
                        {
                            Console.WriteLine($"InnerException: {ex.InnerException.Message}");
                        }
                        throw;
                    }
                },
                Snackbar,
                NavigationManager,
                null,
                "Contribuable supprimé avec succès");
            
            if (success)
            {
                Console.WriteLine("Contribuable supprimé avec succès");
                await LoadData(); // Recharger les données depuis l'API
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception détectée lors de la suppression: {ex.GetType().Name}");
            Console.WriteLine($"Message: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            
            if (ex.InnerException != null)
            {
                Console.WriteLine($"InnerException: {ex.InnerException.Message}");
                Console.WriteLine($"InnerException StackTrace: {ex.InnerException.StackTrace}");
            }
            
            Snackbar.Add($"Erreur lors de la suppression du contribuable: {ex.Message}", Severity.Error);
        }
    }
} 