@page "/contribuable/mes-obligations"
@using MudBlazor
@using PayCom.Blazor.Infrastructure.Auth
@using PayCom.Blazor.Infrastructure.Api
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using PayCom.Blazor.Client.Pages.Contribuables.Dialogs

@inject ISnackbar Snackbar
@inject IApiClient ApiClient
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Mes Obligations Fiscales - PayCom</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="3" Class="pa-4 mb-4 rounded-lg">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Assignment" Color="Color.Primary" Size="Size.Large" Class="mr-2" />
                <MudText Typo="Typo.h4" Color="Color.Primary">Mes Obligations Fiscales</MudText>
            </MudStack>
            
            <MudStack Row="true">
                <MudToggleIconButton
                    @bind-Toggled="@_showActiveOnly"
                    Icon="@Icons.Material.Filled.FilterAlt"
                    Title="Voir toutes les obligations"
                    ToggledIcon="@Icons.Material.Filled.FilterAltOff"
                    ToggledTitle="Voir uniquement les obligations actives"
                    Color="Color.Primary"
                    ToggledColor="Color.Secondary"
                    Size="Size.Medium" />
                
                <MudTextField @bind-Value="_searchString" 
                             Placeholder="Rechercher..." 
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Search" 
                             IconSize="Size.Medium" 
                             Immediate="true"
                             Class="ml-2" />
            </MudStack>
        </MudStack>

        <MudDivider Class="mb-4" />
        
        @if (_loading)
        {
            <div class="d-flex justify-center align-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (_obligations == null || !_obligations.Any())
        {
            <MudAlert Severity="Severity.Info" Class="mb-4">
                Aucune obligation fiscale trouvée. Vous n'avez pas encore d'obligations fiscales associées à votre compte.
            </MudAlert>
        }
        else
        {
            <MudTable Items="@_filteredObligations" 
                     Dense="true" 
                     Hover="true" 
                     Bordered="false" 
                     Striped="true" 
                     Filter="new Func<ObligationFiscaleResponse, bool>(FilterObligations)"
                     @bind-SelectedItem="_selectedObligation"
                     OnRowClick="@((e) => ShowObligationDetails(e.Item))"
                     T="ObligationFiscaleResponse">
                <HeaderContent>
                    <MudTh>Type de taxe</MudTh>
                    <MudTh>Date de début</MudTh>
                    <MudTh>Date de fin</MudTh>
                    <MudTh>Montant</MudTh>
                    <MudTh>Statut</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Type de taxe">@GetTypeTaxeName(context.TypeTaxeId)</MudTd>
                    <MudTd DataLabel="Date de début">@context.DateDebut.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="Date de fin">@(context.DateFin.HasValue ? context.DateFin.Value.ToString("dd/MM/yyyy") : "-")</MudTd>
                    <MudTd DataLabel="Montant">@(context.MontantPersonnalise.HasValue ? context.MontantPersonnalise.Value.ToString("N0") : context.MontantCalcule.ToString("N0")) FCFA</MudTd>
                    <MudTd DataLabel="Statut">
                        <MudChip T="string" Color="@(context.EstActif ? Color.Success : Color.Error)" Size="Size.Small">
                            @(context.EstActif ? "Actif" : "Inactif")
                        </MudChip>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                      Color="Color.Primary" 
                                      Size="Size.Small" 
                                      OnClick="@(() => ShowObligationDetails(context))" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50 }" />
                </PagerContent>
            </MudTable>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<ObligationFiscaleResponse> _obligations;
    private List<ObligationFiscaleResponse> _filteredObligations => _showActiveOnly 
        ? _obligations?.Where(o => o.EstActif).ToList() 
        : _obligations;
    private Dictionary<Guid, TypeTaxeResponse> _typesTaxes = new();
    private List<EcheanceDto> _echeances;
    private bool _loading = true;
    private string _userId;
    private Guid? _contribuableId;
    private string _searchString = "";
    private bool _showActiveOnly = true;
    private ObligationFiscaleResponse _selectedObligation;
    private const string ApiVersion = "1.0";
    
    // Classe pour représenter les échéances
    public class EcheanceDto
    {
        public Guid Id { get; set; }
        public Guid ObligationFiscaleId { get; set; }
        public int AnneeImposition { get; set; }
        public int PeriodeImposition { get; set; }
        public DateTime DateLimite { get; set; }
        public decimal Montant { get; set; }
        public bool EstPayee { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await LoadTypesTaxes();
        await LoadObligationsFiscales();
    }
    
    private async Task LoadUserData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity.IsAuthenticated)
        {
            _userId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            
            if (Guid.TryParse(_userId, out var userIdGuid))
            {
                try
                {
                    // Utiliser l'API directe pour récupérer le contribuable par son ID utilisateur
                    var contribuable = await ApiClient.GetContribuableByUserIdEndPointsAsync(ApiVersion, userIdGuid);
                    if (contribuable?.Id != null)
                    {
                        _contribuableId = contribuable.Id.Value;
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erreur lors de la récupération du profil contribuable: {ex.Message}", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("ID utilisateur invalide", Severity.Error);
            }
        }
    }
    
    private async Task LoadTypesTaxes()
    {
        try
        {
            var searchCommand = new SearchTypeTaxeCommand
            {
                PageNumber = 1,
                PageSize = 100
            };
            
            var result = await ApiClient.SearchTypeTaxeEndPointsAsync(ApiVersion, searchCommand);
            
            if (result?.Items != null)
            {
                _typesTaxes = result.Items.ToDictionary(t => t.Id);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des types de taxes: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task LoadObligationsFiscales()
    {
        try
        {
            _loading = true;
            
            if (_contribuableId.HasValue)
            {
                // Utiliser l'API spécifique pour récupérer les obligations par contribuable
                var obligations = await ApiClient.GetObligationsByContribuableEndPointsAsync(ApiVersion, _contribuableId.Value);
                
                if (obligations != null)
                {
                    _obligations = obligations.ToList();
                }
                else
                {
                    _obligations = new List<ObligationFiscaleResponse>();
                }
            }
            else
            {
                _obligations = new List<ObligationFiscaleResponse>();
                Snackbar.Add("Impossible de trouver votre profil contribuable", Severity.Warning);
            }
        }
        catch (UnauthorizedAccessException)
        {
            Snackbar.Add("Vous n'avez pas l'autorisation d'accéder à ces obligations fiscales", Severity.Error);
            _obligations = new List<ObligationFiscaleResponse>();
        }
        catch (HttpRequestException ex) when (ex.Message.Contains("401"))
        {
            Snackbar.Add("Session expirée. Veuillez vous reconnecter", Severity.Warning);
            _obligations = new List<ObligationFiscaleResponse>();
        }
        catch (HttpRequestException ex) when (ex.Message.Contains("403"))
        {
            Snackbar.Add("Accès refusé à vos obligations fiscales", Severity.Error);
            _obligations = new List<ObligationFiscaleResponse>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des obligations fiscales: {ex.Message}", Severity.Error);
            _obligations = new List<ObligationFiscaleResponse>();
        }
        finally
        {
            _loading = false;
        }
    }
    
    private string GetTypeTaxeName(Guid typeTaxeId)
    {
        if (_typesTaxes.TryGetValue(typeTaxeId, out var typeTaxe))
        {
            return typeTaxe.Nom;
        }
        
        return "Type inconnu";
    }
    
    private bool FilterObligations(ObligationFiscaleResponse obligation)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
            
        // Recherche par type de taxe
        if (_typesTaxes.TryGetValue(obligation.TypeTaxeId, out var typeTaxe) &&
            typeTaxe.Nom.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            
        // Recherche par dates
        if (obligation.DateDebut.ToString("dd/MM/yyyy").Contains(_searchString))
            return true;
            
        if (obligation.DateFin.HasValue && obligation.DateFin.Value.ToString("dd/MM/yyyy").Contains(_searchString))
            return true;
            
        // Recherche par montant
        if (obligation.MontantCalcule.ToString().Contains(_searchString) || 
            (obligation.MontantPersonnalise.HasValue && obligation.MontantPersonnalise.Value.ToString().Contains(_searchString)))
            return true;
            
        // Recherche par statut
        var statut = obligation.EstActif ? "actif" : "inactif";
        if (statut.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            
        return false;
    }
    
    private void ShowObligationDetails(ObligationFiscaleResponse obligation)
    {
        // Rediriger vers la page de détails de l'obligation
        NavigationManager.NavigateTo($"/contribuable/obligation-fiscale/{obligation.Id}");
    }
    
    private async Task<List<ObligationDetailsDialog.EcheanceDto>> LoadEcheances(Guid obligationId)
    {
        try
        {
            var searchCommand = new PayCom.Blazor.Infrastructure.Api.SearchEcheancesCommand
            {
                PageNumber = 1,
                PageSize = 100,
                ObligationFiscaleId = obligationId
            };
            
            // Utiliser l'API réelle pour charger les échéances
            var result = await ApiClient.SearchEcheanceEndPointsAsync(ApiVersion, searchCommand);
            
            if (result?.Items != null)
            {
                return result.Items.Select(e => new ObligationDetailsDialog.EcheanceDto
                {
                    Id = e.Id,
                    ObligationFiscaleId = e.ObligationFiscaleId,
                    AnneeImposition = e.AnneeImposition,
                    PeriodeImposition = e.PeriodeImposition,
                    DateLimite = e.DateEcheance,
                    Montant = (decimal)e.MontantDu, // Conversion double vers decimal
                    EstPayee = e.Statut == "Payee" || e.MontantRestant <= 0
                }).ToList();
            }
            else
            {
                return new List<ObligationDetailsDialog.EcheanceDto>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des échéances : {ex.Message}", Severity.Error);
            return new List<ObligationDetailsDialog.EcheanceDto>();
        }
    }
} 