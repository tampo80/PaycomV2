@page "/contribuables/personnes-morales"
@using MudBlazor
@using PayCom.Blazor.Client.Shared
@using PayCom.Blazor.Client.Pages.Contribuables.Dialogs
@using PayCom.Blazor.Client.Components
@using PayCom.Blazor.Infrastructure.Api
@using Microsoft.AspNetCore.Components
@using PayCom.Blazor.Client.Pages.Contribuables.Models
@using static PayCom.Blazor.Client.Pages.Contribuables.Models.EnumExtensions

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager

<PageTitle>Contribuables Personnes Morales - PayCom</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="3" Class="pa-4 mb-4 rounded-lg">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Business" Color="Color.Primary" Size="Size.Large" Class="mr-2" />
                <MudText Typo="Typo.h4" Color="Color.Primary">Contribuables Personnes Morales</MudText>
            </MudStack>
           
        </MudStack>

        <MudDivider Class="mb-4" />

        <MudPaper Elevation="0" Class="pa-4 rounded-lg" Style="background-color: var(--mud-palette-background-grey)">
            <MudTable Items="@_contribuables" 
                     Loading="@_loading" 
                     LoadingProgressColor="Color.Primary" 
                     Hover="true" 
                     Striped="true" 
                     Elevation="0"
                     Breakpoint="Breakpoint.Sm" 
                     OnRowClick="@((e) => EditContribuable(e.Item))"
                     Filter="new Func<ContribuableDto, bool>(FilterContribuables)"
                     T="ContribuableDto"
                     Dense="true"
                     Class="rounded-lg">
                <ToolBarContent>
                    <MudText Typo="Typo.h6" Class="mud-text-secondary">Liste des personnes morales</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" 
                                Placeholder="Rechercher une entreprise..." 
                                Adornment="Adornment.Start" 
                                AdornmentIcon="@Icons.Material.Filled.Search" 
                                IconSize="Size.Medium" 
                                Immediate="true"
                                Variant="Variant.Outlined"
                                Class="mt-0 ml-2" 
                                Style="width: 300px"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.NumeroIdentification)">N° Identification</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.RaisonSociale)">Raison sociale</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.NomCommercial)">Nom commercial</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.RCCM)">RCCM</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.NIF)">NIF</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.TypeActivite)">Type d'activité</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.Statut)">Statut</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ContribuableDto, object>(x => x.UtilisateurId)">Compte lié</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align: center">Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="N° Identification">
                        @if (!string.IsNullOrEmpty(context.NumeroIdentification))
                        {
                            <MudChip Color="Color.Secondary" T="string" Size="Size.Small" Text="@context.NumeroIdentification" />
                        }
                        else
                        {
                            <MudText Typo="Typo.caption" Class="mud-text-disabled">Non défini</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Raison sociale">@context.RaisonSociale</MudTd>
                    <MudTd DataLabel="Nom commercial">@context.NomCommercial</MudTd>
                    <MudTd DataLabel="RCCM">@context.RCCM</MudTd>
                    <MudTd DataLabel="NIF">@context.NIF</MudTd>
                    <MudTd DataLabel="Type d'activité">@context.TypeActivite</MudTd>
                    <MudTd DataLabel="Statut">
                        @switch (context.Statut)
                        {
                            case StatutContribuableType.Actif:
                                <MudChip Color="Color.Success" T="string" Size="Size.Small">Actif</MudChip>
                                break;
                            case StatutContribuableType.Inactif:
                                <MudChip Color="Color.Error" T="string" Size="Size.Small">Inactif</MudChip>
                                break;
                            case StatutContribuableType.EnAttente:
                                <MudChip Color="Color.Warning" T="string" Size="Size.Small">En attente</MudChip>
                                break;
                            default:
                                <MudChip Color="Color.Default" T="string" Size="Size.Small">Inconnu</MudChip>
                                break;
                        }
                    </MudTd>
                    <MudTd DataLabel="Compte lié">
                        @if (context.UtilisateurId.HasValue)
                        {
                            <MudChip Color="Color.Success" T="string" Size="Size.Small" Icon="@Icons.Material.Filled.Check">Lié</MudChip>
                        }
                        else
                        {
                            <MudButton Size="Size.Small" 
                                      Variant="Variant.Outlined" 
                                      Color="Color.Primary"
                                      OnClick="@(() => AssocierUtilisateur(context))"
                                      StartIcon="@Icons.Material.Filled.Link">
                                Associer
                            </MudButton>
                        }
                    </MudTd>
                    <MudTd Style="text-align: center">
                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudTooltip Text="Modifier ce contribuable">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                              Color="Color.Primary" 
                                              Size="Size.Small" 
                                              OnClick="@(() => EditContribuable(context))" 
                                              Class="ma-1" />
                            </MudTooltip>
                            <MudTooltip Text="Supprimer ce contribuable">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                              Color="Color.Error" 
                                              Size="Size.Small" 
                                              OnClick="() => ShowDeleteConfirmation(context)" 
                                              Class="ma-1" />
                            </MudTooltip>
                        </MudStack>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                        <MudIcon Icon="@Icons.Material.Filled.SearchOff" Color="Color.Secondary" Size="Size.Large" />
                        <MudText Typo="Typo.subtitle1">Aucune personne morale trouvée</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">Essayez de modifier vos critères de recherche ou ajoutez un nouveau contribuable.</MudText>
                    </MudStack>
                </NoRecordsContent>
                <LoadingContent>
                    <MudStack AlignItems="AlignItems.Center" Class="pa-4">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                        <MudText Typo="Typo.subtitle1">Chargement des contribuables...</MudText>
                    </MudStack>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private List<ContribuableDto> _contribuables = new();
    private bool _loading = true;
    private string _searchString = "";
    private const string ApiVersion = "1.0";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            StateHasChanged();

            LogDebugInfo("Démarrage du chargement des personnes morales");
            
            var command = new SearchContribuableCommand
            {
                PageNumber = 1,
                PageSize = 50,
                OrderBy = new List<string> { "Nom" }
            };
            
            LogDebugInfo($"Requête: PageNumber={command.PageNumber}, PageSize={command.PageSize}, Keyword={command.Keyword}");

            var result = await ApiClient.SearchContribuableEndPointsAsync(ApiVersion, command);
            LogDebugInfo($"Réponse reçue: {(result != null ? "OK" : "NULL")}, Items: {result?.Items?.Count ?? 0}");
             
            if (result?.Items != null)
            {
                var filteredItems = result.Items
                    .Where(c => c.TypeContribuable == PayCom.Blazor.Infrastructure.Api.TypeContribuable._1)
                    .ToList();
                
                LogDebugInfo($"Filtrage des items: {filteredItems.Count} sur {result.Items.Count} sont des personnes morales");
                
                _contribuables = filteredItems
                    .Select(c => new ContribuableDto
                    {
                        Id = c.Id ?? Guid.Empty,
                        RaisonSociale = c.Nom ?? string.Empty,
                        NomCommercial = c.NomCommercial ?? string.Empty,
                        RCCM = c.NumeroRegistreCommerce ?? string.Empty,
                        NumeroIdentification = c.NumeroIdentification ?? string.Empty,
                        NIF = c.Nif ?? string.Empty,
                        TypeContribuable = MapTypeContribuable(c.TypeContribuable),
                        Adresse = c.Adresse ?? string.Empty,
                        LocalisationGPS = c.LocalisationGPS ?? string.Empty,
                        TypeActivite = c.TypeActivite ?? string.Empty,
                        ContactPrincipal = c.ContactPrincipal ?? string.Empty,
                        ContactSecondaire = c.ContactSecondaire ?? string.Empty,
                        Email = c.Email ?? string.Empty,
                        DateEnregistrement = c.DateEnregistrement ?? DateTime.Now,
                        Statut = MapStatut(c.Statut),
                        UtilisateurId = c.UtilisateurId,
                        AgentFiscalId = c.AgentFiscalId,
                        DateCreationEntreprise = c.DateCreationEntreprise,
                        SecteurActivite = c.SecteurActivite ?? string.Empty,
                        CapitalSocial = c.CapitalSocial.HasValue ? (decimal?)c.CapitalSocial.Value : null,
                        FormeJuridique = c.FormeJuridique ?? string.Empty,
                        RepresentantLegal = c.RepresentantLegal ?? string.Empty,
                        Nom = string.Empty,
                        Prenom = string.Empty
                    }).ToList();
                
                LogDebugInfo($"Chargé {_contribuables.Count} personnes morales");
            }
        }
        catch (Exception ex)
        {
            LogDebugInfo($"Erreur lors du chargement des personnes morales: {ex.Message}");
            if (ex.InnerException != null)
            {
                LogDebugInfo($"InnerException: {ex.InnerException.Message}");
            }
            Snackbar.Add($"Erreur lors de la récupération des données: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
            LogDebugInfo("Fin du chargement des personnes morales");
        }
    }

    private bool FilterContribuables(ContribuableDto contribuable)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return contribuable.RaisonSociale.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               contribuable.NomCommercial.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               contribuable.NumeroIdentification.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               contribuable.RCCM.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               contribuable.NIF.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               contribuable.TypeActivite.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               contribuable.ContactPrincipal.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void LogDebugInfo(string message)
    {
        Console.WriteLine($"[ContribuablesMorales] {DateTime.Now:HH:mm:ss.fff} - {message}");
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { 
            CloseButton = false, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };
        
        var contribuable = new ContribuableDto 
        { 
            TypeContribuable = TypeContribuableType.PersonneMorale
        };
        
        var parameters = new DialogParameters();
        parameters.Add("Model", contribuable);
        parameters.Add("DialogTitle", "Nouveau Contribuable Personne Morale");
        parameters.Add("ButtonText", "Ajouter");
        parameters.Add("OnValidSubmit", new Func<ContribuableDto, Task<bool>>(SaveContribuable));

        var dialog = await DialogService.ShowAsync<ContribuableDialog>("Nouveau Contribuable", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }
    
    private async Task<bool> SaveContribuable(ContribuableDto contribuable)
    {
        try
        {
            Console.WriteLine("Démarrage de SaveContribuable dans ContribuablesMorales");
            
            // Création d'un objet command en utilisant des propriétés
            var command = new CreateContribuableCommand
            {
                // Personne morale
                NumeroRegistreCommerce = contribuable.RCCM ?? string.Empty,
                Nif = contribuable.NIF ?? string.Empty,
                DateCreationEntreprise = contribuable.DateCreationEntreprise,
                SecteurActivite = contribuable.SecteurActivite ?? string.Empty,
                CapitalSocial = contribuable.CapitalSocial.HasValue ? (double)contribuable.CapitalSocial.Value : null,
                FormeJuridique = contribuable.FormeJuridique ?? string.Empty,
                RepresentantLegal = contribuable.RepresentantLegal ?? string.Empty,
                
                // Champs communs
                NumeroIdentification = contribuable.NumeroIdentification,
                NomCommercial = contribuable.NomCommercial ?? string.Empty,
                Adresse = contribuable.Adresse,
                LocalisationGPS = contribuable.LocalisationGPS ?? string.Empty,
                TypeActivite = contribuable.TypeActivite,
                ContactPrincipal = contribuable.ContactPrincipal,
                ContactSecondaire = contribuable.ContactSecondaire ?? string.Empty,
                Email = contribuable.Email ?? string.Empty,
                DateEnregistrement = contribuable.DateEnregistrement == default ? DateTime.Now : contribuable.DateEnregistrement,
                UtilisateurId = contribuable.UtilisateurId,
                AgentFiscalId = contribuable.AgentFiscalId,
                
                // Forcer explicitement les valeurs des énumérations
                TypeContribuable = MapToApiTypeContribuable(TypeContribuableType.PersonneMorale),
                Statut = MapToApiStatut(contribuable.Statut == default ? StatutContribuableType.Actif : contribuable.Statut),
                
                // Valeurs nulles pour personne physique
                Nom = string.Empty,
                Prenom = string.Empty,
                DateNaissance = null,
                Genre = PayCom.Blazor.Infrastructure.Api.Genre._0 // Valeur par défaut
            };
            
            Console.WriteLine("Appel API CreateContribuableEndPointsAsync");
            var response = await ApiClient.CreateContribuableEndPointsAsync(ApiVersion, command);
            Console.WriteLine($"Réponse API reçue: {(response != null ? "OK" : "NULL")}");
            
            if (response != null)
            {
                await LoadData();
                Snackbar.Add("Contribuable personne morale ajouté avec succès", Severity.Success);
                Console.WriteLine("SaveContribuable réussie, retourne true");
                return true;
            }
            
            Console.WriteLine("Réponse API null, retourne false");
            return false;
        }
        catch (ApiException ex)
        {
            var errorMessage = "Erreur lors de l'ajout du contribuable";
            
            if (ex.StatusCode == 400)
            {
                errorMessage = "Veuillez vérifier les informations saisies";
            }
            else if (ex.StatusCode == 409)
            {
                errorMessage = "Un contribuable avec ce numéro d'identification existe déjà";
            }
            
            Console.WriteLine($"ApiException dans SaveContribuable: {ex.Message}, StatusCode: {ex.StatusCode}");
            Snackbar.Add(errorMessage, Severity.Error);
            return false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception dans SaveContribuable: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            Snackbar.Add($"Erreur lors de l'ajout du contribuable: {ex.Message}", Severity.Error);
            return false;
        }
    }

    private async Task EditContribuable(ContribuableDto contribuable)
    {
        var options = new DialogOptions { 
            CloseButton = false, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };
        
        var parameters = new DialogParameters();
        parameters.Add("Model", contribuable);
        parameters.Add("DialogTitle", "Modifier le Contribuable");
        parameters.Add("ButtonText", "Mettre à jour");
        parameters.Add("OnValidSubmit", new Func<ContribuableDto, Task<bool>>(SaveEditedContribuable));

        var dialog = await DialogService.ShowAsync<ContribuableDialog>("Modifier le Contribuable", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }
    
    private async Task<bool> SaveEditedContribuable(ContribuableDto contribuable)
    {
        try
        {
            Console.WriteLine("Démarrage de SaveEditedContribuable dans ContribuablesMorales");
            
            // Création d'un objet command en utilisant des propriétés
            var command = new UpdateContribuableCommand
            {
                Id = contribuable.Id,
                
                // Personne morale
                NumeroRegistreCommerce = contribuable.RCCM ?? string.Empty,
                Nif = contribuable.NIF ?? string.Empty,
                DateCreationEntreprise = contribuable.DateCreationEntreprise,
                SecteurActivite = contribuable.SecteurActivite ?? string.Empty,
                CapitalSocial = contribuable.CapitalSocial.HasValue ? (double)contribuable.CapitalSocial.Value : null,
                FormeJuridique = contribuable.FormeJuridique ?? string.Empty,
                RepresentantLegal = contribuable.RepresentantLegal ?? string.Empty,
                
                // Champs communs
                NumeroIdentification = contribuable.NumeroIdentification,
                NomCommercial = contribuable.NomCommercial ?? string.Empty,
                Adresse = contribuable.Adresse,
                LocalisationGPS = contribuable.LocalisationGPS ?? string.Empty,
                TypeActivite = contribuable.TypeActivite,
                ContactPrincipal = contribuable.ContactPrincipal,
                ContactSecondaire = contribuable.ContactSecondaire ?? string.Empty,
                Email = contribuable.Email ?? string.Empty,
                DateEnregistrement = contribuable.DateEnregistrement == default ? DateTime.Now : contribuable.DateEnregistrement,
                UtilisateurId = contribuable.UtilisateurId,
                AgentFiscalId = contribuable.AgentFiscalId,
                
                // Forcer explicitement les valeurs des énumérations
                TypeContribuable = MapToApiTypeContribuable(TypeContribuableType.PersonneMorale),
                Statut = MapToApiStatut(contribuable.Statut == default ? StatutContribuableType.Actif : contribuable.Statut),
                
                // Valeurs nulles pour personne physique
                Nom = string.Empty,
                Prenom = string.Empty,
                DateNaissance = null,
                Genre = PayCom.Blazor.Infrastructure.Api.Genre._0 // Valeur par défaut
            };
            
            Console.WriteLine("Appel API UpdateContribuableEndPointsAsync");
            var response = await ApiClient.UpdateContribuableEndPointsAsync(ApiVersion, contribuable.Id, command);
            Console.WriteLine($"Réponse API reçue: {(response != null ? "OK" : "NULL")}");
            
            if (response != null)
            {
                await LoadData();
                Snackbar.Add("Contribuable mis à jour avec succès", Severity.Success);
                Console.WriteLine("SaveEditedContribuable réussie, retourne true");
                return true;
            }
            
            Console.WriteLine("Réponse API null, retourne false");
            return false;
        }
        catch (ApiException ex)
        {
            var errorMessage = "Erreur lors de la mise à jour du contribuable";
            
            if (ex.StatusCode == 400)
            {
                errorMessage = "Veuillez vérifier les informations saisies";
            }
            else if (ex.StatusCode == 409)
            {
                errorMessage = "Un contribuable avec ce numéro d'identification existe déjà";
            }
            
            Console.WriteLine($"ApiException dans SaveEditedContribuable: {ex.Message}, StatusCode: {ex.StatusCode}");
            Snackbar.Add(errorMessage, Severity.Error);
            return false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception dans SaveEditedContribuable: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            Snackbar.Add($"Erreur lors de la mise à jour du contribuable: {ex.Message}", Severity.Error);
            return false;
        }
    }

    private async Task ShowDeleteConfirmation(ContribuableDto contribuable)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Êtes-vous sûr de vouloir supprimer le contribuable '{contribuable.RaisonSociale}' ?");
        parameters.Add("ButtonText", "Supprimer");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Components.ConfirmDialog>("Confirmation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool confirmed && confirmed)
        {
            await DeleteContribuable(contribuable);
        }
    }
    
    private async Task DeleteContribuable(ContribuableDto contribuable)
    {
        try
        {
            // Appel à l'API pour supprimer le contribuable
            await ApiClient.DeleteContribuableEndPointsAsync(ApiVersion, contribuable.Id);
            
            await LoadData();
            Snackbar.Add("Contribuable supprimé avec succès", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de la suppression du contribuable: {ex.Message}", Severity.Error);
        }
    }

    private async Task AssocierUtilisateur(ContribuableDto contribuable)
    {
        try
        {
            // Appel à l'API pour récupérer les utilisateurs disponibles
            var options = new DialogOptions { 
                CloseButton = true, 
                MaxWidth = MaxWidth.Medium,
                FullWidth = false
            };
            
            var parameters = new DialogParameters();
            parameters.Add("ContribuableId", contribuable.Id);
            parameters.Add("ContribuableNom", contribuable.RaisonSociale);
            
            var dialog = await DialogService.ShowAsync<AssocierUtilisateurDialog>("Associer un utilisateur", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data is Guid utilisateurId)
            {
                try
                {
                    // Appel à l'API pour associer l'utilisateur au contribuable
                    var response = await ApiClient.AssocierUtilisateurContribuableEndPointsAsync(ApiVersion, contribuable.Id, utilisateurId);
                    
                    if (response != null)
                    {
                        await LoadData();
                        Snackbar.Add("Utilisateur associé avec succès au contribuable", Severity.Success);
                    }
                }
                catch (ApiException ex)
                {
                    string errorMessage = "Erreur lors de l'association de l'utilisateur";
                    
                    // Vérifier si l'erreur contient un message spécifique sur l'utilisateur déjà associé
                    if (ex.Response != null && ex.Response.Contains("déjà associé à un autre contribuable"))
                    {
                        errorMessage = "Cet utilisateur est déjà associé à un autre contribuable. Un utilisateur ne peut être associé qu'à un seul contribuable.";
                    }
                    
                    Console.WriteLine($"ApiException dans AssocierUtilisateur: {ex.Message}, StatusCode: {ex.StatusCode}, Response: {ex.Response}");
                    Snackbar.Add(errorMessage, Severity.Error);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception dans AssocierUtilisateur: {ex.Message}");
                    Snackbar.Add($"Erreur lors de l'association de l'utilisateur: {ex.Message}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur: {ex.Message}", Severity.Error);
        }
    }
} 