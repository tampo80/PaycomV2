@page "/contribuable/mes-paiements/historique"
@using MudBlazor
@using PayCom.Blazor.Infrastructure.Auth
@using PayCom.Blazor.Infrastructure.Api
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using PayCom.Blazor.Client.Shared.Models

@inject ISnackbar Snackbar
@inject IApiClient ApiClient
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Historique des Paiements - PayCom</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="3" Class="pa-4 mb-4 rounded-lg">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.History" Color="Color.Primary" Size="Size.Large" Class="mr-2" />
                <MudText Typo="Typo.h4" Color="Color.Primary">Historique des Paiements</MudText>
            </MudStack>
            
            <MudStack Row="true">
                <MudDateRangePicker @bind-DateRange="_dateRange" 
                                   Label="Filtrer par date" 
                                   AdornmentColor="Color.Primary"
                                   PickerVariant="PickerVariant.Dialog"
                                   AutoClose="true"
                                   OnClose="@(() => LoadPaiements())"
                                   Class="mr-2" />
                
                <MudTextField @bind-Value="_searchString" 
                             Placeholder="Rechercher..." 
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Search" 
                             IconSize="Size.Medium" 
                             Immediate="true"
                             Class="ml-2" />
            </MudStack>
        </MudStack>

        <MudDivider Class="mb-4" />
        
        @if (_loading)
        {
            <div class="d-flex justify-center align-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (_paiements == null || !_paiements.Any())
        {
            <MudAlert Severity="Severity.Info" Class="mb-4">
                <MudText>Aucun paiement trouvé. Vous n'avez pas encore effectué de paiements.</MudText>
                <MudText Class="mt-2" Typo="Typo.caption">
                    Contribuable ID: @_contribuableId?.ToString() ?? "Non défini"
                </MudText>
            </MudAlert>
            
            <MudStack Row="true" Class="mt-4" Spacing="2">
                <MudButton Href="/contribuable/mes-paiements/effectuer" 
                          Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.Payment">
                    Effectuer un paiement
                </MudButton>
                
                <MudButton OnClick="@CreateTestData" 
                          Variant="Variant.Outlined" 
                          Color="Color.Secondary" 
                          StartIcon="@Icons.Material.Filled.DataSaverOn">
                    Créer des données de test
                </MudButton>
                
                <MudButton OnClick="@LoadPaiements" 
                          Variant="Variant.Text" 
                          Color="Color.Info" 
                          StartIcon="@Icons.Material.Filled.Refresh">
                    Actualiser
                </MudButton>
                
                <MudButton OnClick="@TestDialog" 
                          Variant="Variant.Text" 
                          Color="Color.Warning" 
                          StartIcon="@Icons.Material.Filled.BugReport">
                    Test Dialog
                </MudButton>
            </MudStack>
        }
        else
        {
            <MudTable Items="@_filteredPaiements" 
                     Dense="true" 
                     Hover="true" 
                     Bordered="false" 
                     Striped="true" 
                     Filter="new Func<PaiementDto, bool>(FilterPaiements)"
                     OnRowClick="@((e) => ShowPaiementDetails(e.Item))"
                     T="PaiementDto">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<PaiementDto, object>(x => x.Date)">Date</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PaiementDto, object>(x => x.Reference)">Référence</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PaiementDto, object>(x => x.ObligationFiscale)">Obligation</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PaiementDto, object>(x => x.Montant)">Montant</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PaiementDto, object>(x => x.ModePaiement)">Mode</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PaiementDto, object>(x => x.Statut)">Statut</MudTableSortLabel></MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Date">@context.Date.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="Référence">@context.Reference</MudTd>
                    <MudTd DataLabel="Obligation">@context.ObligationFiscale</MudTd>
                    <MudTd DataLabel="Montant">@context.Montant.ToString("N0") FCFA</MudTd>
                    <MudTd DataLabel="Mode">@context.ModePaiement</MudTd>
                    <MudTd DataLabel="Statut">
                        <MudChip T="string" Color="@GetStatutColor(context.Statut)" Size="Size.Small">
                            @context.Statut
                        </MudChip>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                      Color="Color.Primary" 
                                      Size="Size.Small" 
                                      OnClick="@(() => ShowPaiementDetails(context))" />
                        
                        @if (context.Statut == "Confirmé")
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Receipt" 
                                         Color="Color.Secondary" 
                                         Size="Size.Small" 
                                         OnClick="@(() => DownloadReceipt(context))" 
                                         Title="Télécharger le reçu" />
                        }
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50 }" />
                </PagerContent>
            </MudTable>
            
            <MudDivider Class="my-4" />
            
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.subtitle1">
                    <b>Total des paiements:</b> @_paiements.Sum(p => p.Montant).ToString("N0") FCFA
                </MudText>
                
                <MudButton Href="/contribuable/mes-paiements/effectuer" 
                          Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.Payment">
                    Effectuer un nouveau paiement
                </MudButton>
            </MudStack>
        }
    </MudPaper>
</MudContainer>

<!-- L'ancienne dialog est supprimée, on utilise maintenant le service DialogService -->

@code {
    private List<PaiementDto> _paiements = new List<PaiementDto>();
    private List<PaiementDto> _filteredPaiements => _paiements ?? new List<PaiementDto>();
    private bool _loading = true;
    private string _userId;
    private Guid? _contribuableId;
    private string _searchString = "";
    private DateRange _dateRange = new DateRange(DateTime.Now.AddMonths(-3), DateTime.Now);
    private const string ApiVersion = "1.0";
    
    // Utilisation de la classe PaiementDto partagée dans PayCom.Blazor.Client.Shared.Models
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await LoadPaiements();
    }
    
    private async Task LoadUserData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity.IsAuthenticated)
        {
            _userId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            Console.WriteLine($"[DEBUG] User ID from claims: {_userId}");
            
            if (Guid.TryParse(_userId, out var userIdGuid))
            {
                try
                {
                    // Utiliser l'API directe pour récupérer le contribuable par son ID utilisateur
                    var contribuable = await ApiClient.GetContribuableByUserIdEndPointsAsync(ApiVersion, userIdGuid);
                    if (contribuable?.Id != null)
                    {
                        _contribuableId = contribuable.Id.Value;
                        Console.WriteLine($"[DEBUG] Contribuable trouvé - ID: {_contribuableId.Value}");
                        Snackbar.Add($"Contribuable trouvé: {contribuable.Nom} {contribuable.Prenom}", Severity.Info);
                    }
                    else
                    {
                        Console.WriteLine("[DEBUG] Aucun contribuable trouvé pour cet utilisateur");
                        Snackbar.Add("Aucun contribuable associé à votre compte", Severity.Warning);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[DEBUG] Erreur API GetContribuableByUserId: {ex.Message}");
                    Snackbar.Add($"Erreur lors de la récupération du profil contribuable: {ex.Message}", Severity.Error);
                }
            }
            else
            {
                Console.WriteLine("[DEBUG] ID utilisateur invalide - impossible de parser en Guid");
                Snackbar.Add("ID utilisateur invalide", Severity.Error);
            }
        }
        else
        {
            Console.WriteLine("[DEBUG] Utilisateur non authentifié");
        }
    }
    
    private async Task LoadPaiements()
    {
        try
        {
            _loading = true;
            
            if (_contribuableId == null)
            {
                Console.WriteLine("[DEBUG] Impossible de charger les paiements : _contribuableId est null");
                Snackbar.Add("Impossible de charger les paiements : contribuable non trouvé", Severity.Error);
                return;
            }

            Console.WriteLine($"[DEBUG] Recherche de paiements pour le contribuable ID: {_contribuableId.Value}");

            // Rechercher les paiements avec les critères de date en utilisant le nouvel endpoint spécifique
            var searchCommand = new SearchPaiementsByContribuableCommand
            {
                ContribuableId = _contribuableId.Value,
                PageNumber = 1,
                PageSize = 100,
                IncludeEcheances = true,
                IncludeObligations = true
            };
            
            // Temporairement désactiver les filtres de date pour le debug
            // Appliquer le filtre de date si défini
            /*if (_dateRange.Start.HasValue)
            {
                searchCommand.DateDebut = _dateRange.Start.Value;
                Console.WriteLine($"[DEBUG] Filtre date début: {_dateRange.Start.Value:yyyy-MM-dd}");
            }
            
            if (_dateRange.End.HasValue)
            {
                searchCommand.DateFin = _dateRange.End.Value;
                Console.WriteLine($"[DEBUG] Filtre date fin: {_dateRange.End.Value:yyyy-MM-dd}");
            }*/
            
            Console.WriteLine("[DEBUG] Filtres de date temporairement désactivés pour le debug");
            
            Console.WriteLine("[DEBUG] Appel de l'API SearchPaiementsByContribuableEndPointsAsync...");
            var paiementsResult = await ApiClient.SearchPaiementsByContribuableEndPointsAsync(ApiVersion, searchCommand);
            
            Console.WriteLine($"[DEBUG] Résultat API - Items: {paiementsResult?.Items?.Count ?? 0}");
            Console.WriteLine($"[DEBUG] Résultat API - TotalCount: {paiementsResult?.TotalCount ?? 0}");
            
            if (paiementsResult?.Items != null)
            {
                // Mapper les paiements vers PaiementDto (plus besoin de filtrer car l'API le fait déjà)
                _paiements = paiementsResult.Items
                    .Select(p => new PaiementDto
                    {
                        Id = p.Id,
                        Reference = p.CodeTransaction ?? $"PAY-{p.Id.ToString()[..8]}",
                        Date = p.Date,
                        ObligationFiscale = p.TypeTaxeNom ?? "Paiement libre",
                        TypeTaxe = p.TypeTaxeNom ?? "Type inconnu",
                        Montant = (decimal)p.Montant,
                        ModePaiement = GetModePaiementLabel(p.ModePaiement),
                        Statut = GetStatutLabel(p.Status),
                        CodeTransaction = p.CodeTransaction ?? "",
                        DateConfirmation = p.Status == StatutPaiement._1 ? p.DateTransaction : null, // Confirmé
                        Notes = p.InformationsSupplementaires ?? ""
                    })
                    .OrderByDescending(p => p.Date)
                    .ToList();
                    
                Console.WriteLine($"[DEBUG] Nombre de paiements mappés: {_paiements.Count}");
                
                if (_paiements.Count == 0)
                {
                    Snackbar.Add("Aucun paiement trouvé pour la période sélectionnée", Severity.Info);
                }
                else
                {
                    Snackbar.Add($"{_paiements.Count} paiement(s) trouvé(s)", Severity.Success);
                }
            }
            else
            {
                Console.WriteLine("[DEBUG] paiementsResult.Items est null");
                _paiements = new List<PaiementDto>();
                Snackbar.Add("Aucun paiement trouvé", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[DEBUG] Exception lors du chargement des paiements: {ex.Message}");
            Console.WriteLine($"[DEBUG] Stack trace: {ex.StackTrace}");
            Snackbar.Add($"Erreur lors du chargement des paiements: {ex.Message}", Severity.Error);
            _paiements = new List<PaiementDto>();
        }
        finally
        {
            _loading = false;
        }
    }
    
    private bool FilterPaiements(PaiementDto paiement)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
            
        // Recherche par référence
        if (paiement.Reference.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            
        // Recherche par obligation fiscale
        if (paiement.ObligationFiscale.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            
        // Recherche par type de taxe
        if (paiement.TypeTaxe.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            
        // Recherche par mode de paiement
        if (paiement.ModePaiement.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            
        // Recherche par statut
        if (paiement.Statut.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            
        // Recherche par montant
        if (paiement.Montant.ToString().Contains(_searchString))
            return true;
            
        return false;
    }
    
    private Color GetStatutColor(string statut)
    {
        return statut switch
        {
            "Confirmé" => Color.Success,
            "En attente" => Color.Warning,
            "Annulé" => Color.Error,
            _ => Color.Default
        };
    }
    
    private async Task ShowPaiementDetails(PaiementDto paiement)
    {
        Console.WriteLine($"[DEBUG] ShowPaiementDetails appelé pour paiement ID: {paiement?.Id}");
        
        if (paiement == null)
        {
            Console.WriteLine("[DEBUG] Paiement est null");
            Snackbar.Add("Erreur: Paiement non trouvé", Severity.Error);
            return;
        }
        
        try
        {
            Console.WriteLine($"[DEBUG] Ouverture de la dialog pour: {paiement.Reference}");
            
            var parameters = new DialogParameters
            {
                ["Reference"] = paiement.Reference,
                ["Date"] = paiement.Date,
                ["ObligationFiscale"] = paiement.ObligationFiscale,
                ["TypeTaxe"] = paiement.TypeTaxe,
                ["Montant"] = paiement.Montant,
                ["ModePaiement"] = paiement.ModePaiement,
                ["Statut"] = paiement.Statut,
                ["CodeTransaction"] = paiement.CodeTransaction,
                ["DateConfirmation"] = paiement.DateConfirmation,
                ["Notes"] = paiement.Notes,
                ["OnDownloadReceipt"] = EventCallback.Factory.Create(this, () => DownloadReceipt(paiement))
            };

            var options = new DialogOptions()
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                CloseButton = true,
                //DisableBackdropClick = false,
                CloseOnEscapeKey = true
            };

            var dialog = await DialogService.ShowAsync<SimplePaiementDialog>("Détails du paiement", parameters, options);
            var result = await dialog.Result;
            
            Console.WriteLine($"[DEBUG] Dialog fermée. Cancelled: {result.Canceled}");
            
            if (!result.Canceled)
            {
                Console.WriteLine("[DEBUG] Dialog fermée par l'utilisateur");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[DEBUG] Erreur dans ShowPaiementDetails: {ex.Message}");
            Snackbar.Add($"Erreur lors de l'ouverture des détails: {ex.Message}", Severity.Error);
        }
    }
    
    private void DownloadReceipt(PaiementDto paiement)
    {
        // Simulation de téléchargement de reçu
        Snackbar.Add("Le reçu est en cours de téléchargement...", Severity.Info);
        
        // Dans une implémentation réelle, on appellerait l'API pour générer et télécharger le reçu
    }
    
    private async Task CreateTestData()
    {
        if (_contribuableId == null)
        {
            Snackbar.Add("Impossible de créer des données de test : contribuable non trouvé", Severity.Error);
            return;
        }
        
        try
        {
            // Créer des paiements de test directement dans la liste pour voir si l'affichage fonctionne
            var testPaiements = new List<PaiementDto>
            {
                new PaiementDto
                {
                    Id = Guid.NewGuid(),
                    Reference = "TEST-001",
                    Date = DateTime.Now.AddDays(-30),
                    ObligationFiscale = "Taxe d'habitation 2024",
                    TypeTaxe = "Taxe d'habitation",
                    Montant = 50000m,
                    ModePaiement = "Carte bancaire",
                    Statut = "Confirmé",
                    CodeTransaction = "CB-TEST-001",
                    DateConfirmation = DateTime.Now.AddDays(-30),
                    Notes = "Paiement de test - Taxe d'habitation"
                },
                new PaiementDto
                {
                    Id = Guid.NewGuid(),
                    Reference = "TEST-002",
                    Date = DateTime.Now.AddDays(-15),
                    ObligationFiscale = "Taxe foncière 2024",
                    TypeTaxe = "Taxe foncière",
                    Montant = 75000m,
                    ModePaiement = "Mobile Money",
                    Statut = "Confirmé",
                    CodeTransaction = "MM-TEST-002",
                    DateConfirmation = DateTime.Now.AddDays(-15),
                    Notes = "Paiement de test - Taxe foncière"
                },
                new PaiementDto
                {
                    Id = Guid.NewGuid(),
                    Reference = "TEST-003",
                    Date = DateTime.Now.AddDays(-7),
                    ObligationFiscale = "Taxe professionnelle 2024",
                    TypeTaxe = "Taxe professionnelle",
                    Montant = 25000m,
                    ModePaiement = "Virement bancaire",
                    Statut = "En attente",
                    CodeTransaction = "VB-TEST-003",
                    DateConfirmation = null,
                    Notes = "Paiement de test - En cours de traitement"
                }
            };
            
            _paiements = testPaiements;
            Snackbar.Add($"Données de test créées : {testPaiements.Count} paiements", Severity.Success);
            
            // Forcer le rafraîchissement
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[DEBUG] Erreur lors de la création des données de test: {ex.Message}");
            Snackbar.Add($"Erreur lors de la création des données de test: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task TestDialog()
    {
        Console.WriteLine("[DEBUG] TestDialog appelé");
        
        // Créer un paiement de test pour la dialog
        var testPaiement = new PaiementDto
        {
            Id = Guid.NewGuid(),
            Reference = "DIALOG-TEST-001",
            Date = DateTime.Now,
            ObligationFiscale = "Test Dialog - Taxe d'habitation",
            TypeTaxe = "Taxe d'habitation",
            Montant = 99999m,
            ModePaiement = "Test Mode",
            Statut = "Confirmé",
            CodeTransaction = "TEST-DIALOG-123456",
            DateConfirmation = DateTime.Now,
            Notes = "Ceci est un test de la dialog des détails de paiement"
        };
        
        Console.WriteLine($"[DEBUG] Paiement de test créé: {testPaiement.Reference}");
        
        Snackbar.Add("Ouverture de la dialog de test...", Severity.Info);
        
        // Ouvrir la dialog avec le paiement de test
        await ShowPaiementDetails(testPaiement);
    }
    

    
    private string GetModePaiementLabel(ModePaiement modePaiement)
    {
        return modePaiement switch
        {
            ModePaiement._1 => "Carte bancaire",
            ModePaiement._2 => "Mobile Money",
            ModePaiement._3 => "Chèque",
            ModePaiement._4 => "Virement bancaire",
            ModePaiement._5 => "Espèces",
            _ => "Inconnu"
        };
    }
    
    private string GetStatutLabel(StatutPaiement statut)
    {
        return statut switch
        {
            StatutPaiement._1 => "Confirmé",
            StatutPaiement._2 => "En attente",
            StatutPaiement._3 => "Annulé",
            StatutPaiement._4 => "Échoué",
            _ => "Inconnu"
        };
    }
} 