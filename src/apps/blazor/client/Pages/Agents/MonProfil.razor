@page "/agent/mon-profil"
@using MudBlazor
@using PayCom.Blazor.Infrastructure.Auth
@using PayCom.Blazor.Infrastructure.Api
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject ISnackbar Snackbar
@inject IApiClient ApiClient
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Mon Profil Agent - PayCom</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="3" Class="pa-4 mb-4 rounded-lg">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Badge" Color="Color.Primary" Size="Size.Large" Class="mr-2" />
                <MudText Typo="Typo.h4" Color="Color.Primary">Mon Profil Agent</MudText>
            </MudStack>
        </MudStack>

        <MudDivider Class="mb-4" />

        @if (_loading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else if (_agentFiscal == null)
        {
            <MudAlert Severity="Severity.Warning" Class="mb-4">
                Votre profil d'agent fiscal n'a pas été trouvé. Veuillez contacter l'administrateur.
            </MudAlert>
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudCard Elevation="0" Class="rounded-lg border pa-4">
                        <MudCardContent>
                            <div class="d-flex flex-column align-center">
                                <MudAvatar Color="Color.Primary" Size="Size.Large" Class="mb-3">
                                    @((!string.IsNullOrEmpty(_agentFiscal.Prenom) ? _agentFiscal.Prenom.Substring(0, 1) : "") + (!string.IsNullOrEmpty(_agentFiscal.Nom) ? _agentFiscal.Nom.Substring(0, 1) : "A"))
                                </MudAvatar>
                                <MudText Typo="Typo.h5" Class="mt-2">
                                    @(!string.IsNullOrEmpty(_agentFiscal.Prenom) ? _agentFiscal.Prenom : "") 
                                    @(!string.IsNullOrEmpty(_agentFiscal.Nom) ? _agentFiscal.Nom : "")
                                </MudText>
                                <MudText Typo="Typo.subtitle1" Color="Color.Primary">Agent Fiscal</MudText>
                                <MudChip T="string" Color="GetStatutColor(_agentFiscal.Statut)" Size="Size.Small" Class="mt-2">
                                    @GetStatutLabel(_agentFiscal.Statut)
                                </MudChip>
                            </div>

                            <MudDivider Class="my-4" />

                            <MudList T="string" Dense="true">
                                <MudListItem T="string" Icon="@Icons.Material.Filled.Badge" IconColor="Color.Primary">
                                    <MudText Typo="Typo.body2"><b>Identifiant:</b> @_agentFiscal.Identifiant</MudText>
                                </MudListItem>
                                <MudListItem T="string" Icon="@Icons.Material.Filled.Email" IconColor="Color.Primary">
                                    <MudText Typo="Typo.body2"><b>Email:</b> @_agentFiscal.Email</MudText>
                                </MudListItem>
                                <MudListItem T="string" Icon="@Icons.Material.Filled.Phone" IconColor="Color.Primary">
                                    <MudText Typo="Typo.body2"><b>Téléphone:</b> @_agentFiscal.Telephone</MudText>
                                </MudListItem>
                                <MudListItem T="string" Icon="@Icons.Material.Filled.CalendarToday" IconColor="Color.Primary">
                                    <MudText Typo="Typo.body2"><b>Date d'embauche:</b> @(_agentFiscal.DateEmbauche.ToString("dd/MM/yyyy"))</MudText>
                                </MudListItem>
                                @if (_agentFiscal.DateFinFonction.HasValue)
                                {
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.EventBusy" IconColor="Color.Error">
                                        <MudText Typo="Typo.body2"><b>Date de fin de fonction:</b> @_agentFiscal.DateFinFonction.Value.ToString("dd/MM/yyyy")</MudText>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="8">
                    <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4 border rounded-lg">
                        <MudTabPanel Text="Informations" Icon="@Icons.Material.Filled.Info">
                            <MudText Typo="Typo.h6" Class="mb-4">Informations détaillées</MudText>
                            
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Nom" Value="@(!string.IsNullOrEmpty(_agentFiscal.Nom) ? _agentFiscal.Nom : "-")" ReadOnly="true" Variant="Variant.Outlined" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Prénom" Value="@(!string.IsNullOrEmpty(_agentFiscal.Prenom) ? _agentFiscal.Prenom : "-")" ReadOnly="true" Variant="Variant.Outlined" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Email" Value="@(!string.IsNullOrEmpty(_agentFiscal.Email) ? _agentFiscal.Email : "-")" ReadOnly="true" Variant="Variant.Outlined" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Téléphone" Value="@(!string.IsNullOrEmpty(_agentFiscal.Telephone) ? _agentFiscal.Telephone : "-")" ReadOnly="true" Variant="Variant.Outlined" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Localisation GPS" Value="@(!string.IsNullOrEmpty(_agentFiscal.LocalisationGPS) ? _agentFiscal.LocalisationGPS : "-")" ReadOnly="true" Variant="Variant.Outlined" FullWidth="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Identifiant" Value="@(!string.IsNullOrEmpty(_agentFiscal.Identifiant) ? _agentFiscal.Identifiant : "-")" ReadOnly="true" Variant="Variant.Outlined" FullWidth="true" />
                                </MudItem>
                            </MudGrid>
                        </MudTabPanel>
                        
                        @if (_agentFiscal.EstCollecteurTerrain)
                        {
                            <MudTabPanel Text="Collecte Terrain" Icon="@Icons.Material.Filled.Terrain">
                                <MudText Typo="Typo.h6" Class="mb-4">Informations de collecte terrain</MudText>
                                
                                <MudPaper Elevation="0" Class="pa-4 mb-4" Style="background-color: var(--mud-palette-background-grey);">
                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                        <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Info" Class="mr-2" />
                                        <MudText Typo="Typo.body2">
                                            Vous êtes enregistré comme collecteur de terrain. Vous pouvez collecter des paiements auprès des contribuables sur le terrain.
                                        </MudText>
                                    </MudStack>
                                </MudPaper>
                                
                                <MudCard Elevation="0" Class="border pa-4 mb-4">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">Portefeuille</MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudChip T="string" Color="Color.Success" Size="Size.Small">Actif</MudChip>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudText Typo="Typo.h4" Color="Color.Primary">@(_agentFiscal.SoldePortefeuille.ToString("N0")) FCFA</MudText>
                                        <MudText Typo="Typo.caption">Solde actuel</MudText>
                                    </MudCardContent>
                                </MudCard>
                                
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.Receipt"
                                          Href="/collecte/historique">
                                    Voir l'historique des collectes
                                </MudButton>
                            </MudTabPanel>
                        }
                        
                        <MudTabPanel Text="Contribuables" Icon="@Icons.Material.Filled.People">
                            <MudText Typo="Typo.h6" Class="mb-4">Contribuables associés</MudText>
                            
                            @if (_loading)
                            {
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.People"
                                          Href="/contribuables/liste">
                                    Voir tous les contribuables
                                </MudButton>
                            }
                        </MudTabPanel>
                    </MudTabs>
                </MudItem>
            </MudGrid>
        }
    </MudPaper>
</MudContainer>

@code {
    private AgentFiscalResponse _agentFiscal;
    private bool _loading = true;
    private string _userId;
    private const string ApiVersion = "1.0";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await LoadAgentData();
    }
    
    private async Task LoadUserData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity.IsAuthenticated)
        {
            _userId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
    }
    
    private async Task LoadAgentData()
    {
        try
        {
            _loading = true;
            
            if (!string.IsNullOrEmpty(_userId) && Guid.TryParse(_userId, out Guid userId))
            {
                try
                {
                    // Essayer d'utiliser le nouvel endpoint spécifique pour récupérer l'agent fiscal par ID utilisateur
                    _agentFiscal = await ApiClient.GetAgentFiscalByUserIdEndPointsAsync(ApiVersion, userId);
                }
                catch (Exception ex)
                {
                    // Si l'API GetAgentFiscalByUserIdEndPointsAsync n'est pas disponible ou échoue,
                    // revenir à la méthode de recherche
                    Snackbar.Add($"Utilisation de la méthode de recherche alternative: {ex.Message}", Severity.Info);
                    
                    // Rechercher l'agent fiscal par son utilisateurId via la recherche
                    var searchCommand = new SearchAgenFiscalsCommand
                    {
                        PageNumber = 1,
                        PageSize = 100
                    };
                    
                    var result = await ApiClient.SearchAgentFiscalEndPointsAsync(ApiVersion, searchCommand);
                    
                    if (result?.Items != null && result.Items.Any())
                    {
                        // Filtrer côté client pour trouver l'agent avec le bon ID utilisateur
                        _agentFiscal = result.Items.FirstOrDefault(a => a.UtilisateurId?.ToString() == _userId);
                        
                        if (_agentFiscal == null)
                        {
                            Snackbar.Add("Aucun profil d'agent fiscal n'est associé à votre compte. Veuillez contacter l'administrateur.", Severity.Warning);
                        }
                    }
                    else
                    {
                        Snackbar.Add("Aucun agent fiscal trouvé.", Severity.Warning);
                        _agentFiscal = null;
                    }
                }
            }
            else
            {
                Snackbar.Add("Identifiant utilisateur non valide.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des données: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }
    
    private Color GetStatutColor(StatutAgent statut)
    {
        return statut switch
        {
            StatutAgent._0 => Color.Success, // Actif
            StatutAgent._1 => Color.Error,   // Inactif
            StatutAgent._2 => Color.Warning, // En congé
            _ => Color.Default
        };
    }
    
    private string GetStatutLabel(StatutAgent statut)
    {
        return statut switch
        {
            StatutAgent._0 => "Actif",
            StatutAgent._1 => "Inactif",
            StatutAgent._2 => "En congé",
            _ => "Inconnu"
        };
    }
} 