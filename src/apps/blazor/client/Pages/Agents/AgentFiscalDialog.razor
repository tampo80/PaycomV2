@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using PayCom.Blazor.Infrastructure.Api

@inject ISnackbar Snackbar

<MudDialog DisableSidePadding="true">
    <TitleContent>
        <div style="background-color: var(--mud-palette-primary); margin: -16px -24px -16px -24px; padding: 16px 24px;">
            <div class="d-flex flex-row align-center justify-space-between">
                <div class="d-flex flex-row align-center">
                    <MudIcon Icon="@Icons.Material.Filled.SupervisorAccount" Class="mr-2" Style="color: white;" />
                    <MudText Typo="Typo.h6" Style="color: white;">@DialogTitle</MudText>
                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" Style="color: white;" OnClick="Cancel" />
            </div>
        </div>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="@Model" @bind-IsValid="@_isValid">
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="my-2" ShowCloseIcon="true" CloseIconClicked="() => _errorMessage = string.Empty">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Class="mr-2" />
                        <MudText>@_errorMessage</MudText>
                    </div>
                </MudAlert>
            }
            
            @if (_fieldErrors.Count > 0)
            {
                <MudAlert Severity="Severity.Warning" Class="my-2" ShowCloseIcon="true" CloseIconClicked="() => _fieldErrors.Clear()">
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Veuillez corriger les erreurs suivantes :</MudText>
                        <div class="pl-2">
                            @foreach (var error in _fieldErrors)
                            {
                                <div class="d-flex align-center mb-1">
                                    <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Class="mr-2" Color="Color.Warning" />
                                    <div>
                                        <strong>@error.Key</strong>: @string.Join(", ", error.Value)
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </MudAlert>
            }
            
            <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3">
                <MudTabPanel Text="Informations générales">
                    <MudGrid Spacing="2">
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="Model.Nom" 
                                        Label="Nom" 
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start" 
                                        AdornmentIcon="@Icons.Material.Filled.Person" 
                                        AdornmentColor="Color.Primary"
                                        Required="true" 
                                        RequiredError="Le nom est requis"
                                        HelperText="Nom de l'agent fiscal"
                                        Counter="100"
                                        Immediate="true"
                                        Error="@(_fieldErrors.ContainsKey("Nom"))"
                                        ErrorText="@(GetFieldErrorText("Nom"))"
                                        Validation="@(new Func<string, IEnumerable<string>>(ValidateNom))" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="Model.Prenom" 
                                        Label="Prénom" 
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start" 
                                        AdornmentIcon="@Icons.Material.Filled.Person" 
                                        AdornmentColor="Color.Primary"
                                        Required="true" 
                                        RequiredError="Le prénom est requis"
                                        HelperText="Prénom de l'agent fiscal"
                                        Counter="100"
                                        Immediate="true"
                                        Error="@(_fieldErrors.ContainsKey("Prenom"))"
                                        ErrorText="@(GetFieldErrorText("Prenom"))"
                                        Validation="@(new Func<string, IEnumerable<string>>(ValidatePrenom))" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="Model.Identifiant" 
                                        Label="Identifiant" 
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start" 
                                        AdornmentIcon="@Icons.Material.Filled.Badge" 
                                        AdornmentColor="Color.Secondary"
                                        Required="true" 
                                        RequiredError="L'identifiant est requis"
                                        HelperText="Identifiant unique de l'agent fiscal"
                                        Counter="50"
                                        Immediate="true"
                                        Error="@(_fieldErrors.ContainsKey("Identifiant"))"
                                        ErrorText="@(GetFieldErrorText("Identifiant"))"
                                        Validation="@(new Func<string, IEnumerable<string>>(ValidateIdentifiant))" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="Model.Statut" 
                                      Label="Statut" 
                                      Variant="Variant.Outlined"
                                      AnchorOrigin="Origin.BottomCenter"
                                      Required="true"
                                      RequiredError="Le statut est requis"
                                      AdornmentIcon="@Icons.Material.Filled.WorkHistory"
                                      AdornmentColor="Color.Primary"
                                      Error="@(_fieldErrors.ContainsKey("Statut"))"
                                      ErrorText="@(GetFieldErrorText("Statut"))">
                                <MudSelectItem Value="@(StatutAgent._0)">Actif</MudSelectItem>
                                <MudSelectItem Value="@(StatutAgent._1)">Inactif</MudSelectItem>
                                <MudSelectItem Value="@(StatutAgent._2)">En formation</MudSelectItem>
                                <MudSelectItem Value="@(StatutAgent._3)">Suspendu</MudSelectItem>
                                <MudSelectItem Value="@(StatutAgent._4)">Retraité</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudDatePicker Date="@Model.DateEmbauche"
                                         DateChanged="@(date => Model.DateEmbauche = date.GetValueOrDefault())" 
                                         Label="Date d'embauche" 
                                         Variant="Variant.Outlined"
                                         Adornment="Adornment.Start"
                                         AdornmentIcon="@Icons.Material.Filled.DateRange"
                                         AdornmentColor="Color.Primary"
                                         Required="true"
                                         RequiredError="La date d'embauche est requise"
                                         DateFormat="dd/MM/yyyy"
                                         Error="@(_fieldErrors.ContainsKey("DateEmbauche"))"
                                         ErrorText="@(GetFieldErrorText("DateEmbauche"))" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudDatePicker Date="@Model.DateFinFonction"
                                         DateChanged="@(date => Model.DateFinFonction = date)" 
                                         Label="Date de fin de fonction" 
                                         Variant="Variant.Outlined"
                                         Adornment="Adornment.Start"
                                         AdornmentIcon="@Icons.Material.Filled.EventBusy"
                                         AdornmentColor="Color.Secondary"
                                         DateFormat="dd/MM/yyyy"
                                         Error="@(_fieldErrors.ContainsKey("DateFinFonction"))"
                                         ErrorText="@(GetFieldErrorText("DateFinFonction"))" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSwitch @bind-Value="Model.EstCollecteurTerrain" 
                                      Label="Agent collecteur de terrain" 
                                      Color="Color.Primary" 
                                      LabelPosition="LabelPosition.End" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                <MudTabPanel Text="Contact">
                    <MudGrid Spacing="2">
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="Model.Email" 
                                        Label="Email" 
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start" 
                                        AdornmentIcon="@Icons.Material.Filled.Email" 
                                        AdornmentColor="Color.Primary"
                                        InputType="InputType.Email"
                                        HelperText="Adresse email de l'agent fiscal"
                                        Counter="100"
                                        Immediate="true"
                                        Error="@(_fieldErrors.ContainsKey("Email"))"
                                        ErrorText="@(GetFieldErrorText("Email"))"
                                        Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="Model.Telephone" 
                                        Label="Téléphone" 
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start" 
                                        AdornmentIcon="@Icons.Material.Filled.Phone" 
                                        AdornmentColor="Color.Primary"
                                        HelperText="Numéro de téléphone de l'agent fiscal"
                                        Counter="20"
                                        Immediate="true"
                                        Error="@(_fieldErrors.ContainsKey("Telephone"))"
                                        ErrorText="@(GetFieldErrorText("Telephone"))"
                                        Validation="@(new Func<string, IEnumerable<string>>(ValidateTelephone))" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Model.LocalisationGPS" 
                                        Label="Localisation GPS" 
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start" 
                                        AdornmentIcon="@Icons.Material.Filled.LocationOn" 
                                        AdornmentColor="Color.Secondary"
                                        HelperText="Coordonnées GPS de l'agent fiscal"
                                        Counter="100"
                                        Immediate="true"
                                        Error="@(_fieldErrors.ContainsKey("LocalisationGPS"))"
                                        ErrorText="@(GetFieldErrorText("LocalisationGPS"))" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                <MudTabPanel Text="Finances" Disabled="!Model.EstCollecteurTerrain">
                    <MudGrid Spacing="2">
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Model.SoldePortefeuille" 
                                        Label="Solde du portefeuille" 
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start" 
                                        AdornmentIcon="@Icons.Material.Filled.AccountBalance" 
                                        AdornmentColor="Color.Primary"
                                        HelperText="Solde du portefeuille de l'agent collecteur"
                                        InputType="InputType.Number"
                                        Error="@(_fieldErrors.ContainsKey("SoldePortefeuille"))"
                                        ErrorText="@(GetFieldErrorText("SoldePortefeuille"))" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            </MudTabs>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudTooltip Text="Annuler les modifications">
            <MudButton Variant="Variant.Outlined" OnClick="Cancel" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error">Annuler</MudButton>
        </MudTooltip>
        <MudTooltip Text="@((_isValid) ? $"{ButtonText} l'agent fiscal" : "Veuillez remplir correctement tous les champs requis")">
            <MudButton Variant="Variant.Filled" OnClick="Submit" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Disabled="@(!_isValid || _processing)">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <span class="ms-2">Traitement...</span>
                }
                else
                {
                    @ButtonText
                }
            </MudButton>
        </MudTooltip>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public IMudDialogInstance MudDialog { get; set; } = default!;
    
    [Parameter] public AgentsFiscaux.AgentFiscalDto Model { get; set; } = new();
    [Parameter] public string ButtonText { get; set; } = "Enregistrer";
    [Parameter] public string DialogTitle { get; set; } = "Agent Fiscal";
    [Parameter] public EventCallback<AgentsFiscaux.AgentFiscalDto> OnValidSubmit { get; set; }

    private MudForm form;
    private bool _isValid;
    private string _errorMessage = string.Empty;
    private Dictionary<string, List<string>> _fieldErrors = new();
    private bool _processing = false;

    protected override void OnInitialized()
    {
        // Valider le formulaire au démarrage pour s'assurer que _isValid est correctement initialisé
        _isValid = !string.IsNullOrWhiteSpace(Model.Nom) && !string.IsNullOrWhiteSpace(Model.Prenom) && !string.IsNullOrWhiteSpace(Model.Identifiant);
    }

    private IEnumerable<string> ValidateNom(string nom)
    {
        if (string.IsNullOrWhiteSpace(nom))
            yield return "Le nom de l'agent fiscal est requis";
        else if (nom.Length < 2)
            yield return "Le nom doit contenir au moins 2 caractères";
        else if (nom.Length > 100)
            yield return "Le nom ne doit pas dépasser 100 caractères";
    }

    private IEnumerable<string> ValidatePrenom(string prenom)
    {
        if (string.IsNullOrWhiteSpace(prenom))
            yield return "Le prénom de l'agent fiscal est requis";
        else if (prenom.Length < 2)
            yield return "Le prénom doit contenir au moins 2 caractères";
        else if (prenom.Length > 100)
            yield return "Le prénom ne doit pas dépasser 100 caractères";
    }

    private IEnumerable<string> ValidateIdentifiant(string identifiant)
    {
        if (string.IsNullOrWhiteSpace(identifiant))
            yield return "L'identifiant de l'agent fiscal est requis";
        else if (identifiant.Length < 2)
            yield return "L'identifiant doit contenir au moins 2 caractères";
        else if (identifiant.Length > 50)
            yield return "L'identifiant ne doit pas dépasser 50 caractères";
    }

    private IEnumerable<string> ValidateEmail(string email)
    {
        if (!string.IsNullOrWhiteSpace(email))
        {
            if (!new EmailAddressAttribute().IsValid(email))
                yield return "L'adresse email n'est pas valide";
            else if (email.Length > 100)
                yield return "L'email ne doit pas dépasser 100 caractères";
        }
    }

    private IEnumerable<string> ValidateTelephone(string telephone)
    {
        if (!string.IsNullOrWhiteSpace(telephone))
        {
            if (telephone.Length < 8)
                yield return "Le numéro de téléphone doit contenir au moins 8 caractères";
            else if (telephone.Length > 20)
                yield return "Le numéro de téléphone ne doit pas dépasser 20 caractères";
        }
    }

    private async Task Submit()
    {
        _errorMessage = string.Empty;
        form.Validate();
        
        if (_isValid)
        {
            try
            {
                _processing = true;
                
                if (OnValidSubmit.HasDelegate)
                {
                    // Invoque le callback et ferme automatiquement le dialogue
                    await OnValidSubmit.InvokeAsync(Model);
                    MudDialog.Close(DialogResult.Ok(Model));
                }
                else
                {
                    MudDialog.Close(DialogResult.Ok(Model));
                }
            }
            catch (Exception ex)
            {
                _errorMessage = ex.Message;
                // En cas d'erreur, on reste sur le formulaire
            }
            finally
            {
                _processing = false;
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();

    public void SetError(string errorMessage)
    {
        _errorMessage = errorMessage;
        StateHasChanged();
    }
    
    // Méthode pour récupérer le texte d'erreur d'un champ spécifique
    private string GetFieldErrorText(string fieldName)
    {
        if (_fieldErrors.TryGetValue(fieldName, out var errors) && errors.Count > 0)
        {
            return string.Join(", ", errors);
        }
        return string.Empty;
    }
    
    // Méthode pour définir des erreurs spécifiques à des champs
    public void SetFieldErrors(Dictionary<string, ICollection<string>> errors)
    {
        _fieldErrors.Clear();
        
        foreach (var error in errors)
        {
            _fieldErrors[error.Key] = error.Value.ToList();
        }
        
        StateHasChanged();
    }
    
    // Méthode pour analyser les erreurs JSON retournées par l'API
    public void ParseApiErrors(string jsonResponse)
    {
        if (string.IsNullOrEmpty(jsonResponse))
            return;
            
        try
        {
            var jsonDoc = JsonDocument.Parse(jsonResponse);
            
            // Vérifier s'il y a un message de détail
            if (jsonDoc.RootElement.TryGetProperty("detail", out var detailElement) && 
                detailElement.ValueKind == JsonValueKind.String)
            {
                _errorMessage = detailElement.GetString() ?? "Une erreur est survenue";
            }
            
            // Extraire les erreurs spécifiques
            if (jsonDoc.RootElement.TryGetProperty("errors", out var errorsElement))
            {
                _fieldErrors.Clear();
                
                // Si les erreurs sont dans un tableau simple
                if (errorsElement.ValueKind == JsonValueKind.Array)
                {
                    var errorsList = new List<string>();
                    foreach (var error in errorsElement.EnumerateArray())
                    {
                        if (error.ValueKind == JsonValueKind.String)
                        {
                            string errorMessage = error.GetString() ?? string.Empty;
                            errorsList.Add(errorMessage);
                            
                            // Essayer de déterminer le champ concerné par l'erreur
                            if (errorMessage.Contains("Nom"))
                            {
                                _fieldErrors["Nom"] = new List<string> { errorMessage };
                            }
                            else if (errorMessage.Contains("Prenom"))
                            {
                                _fieldErrors["Prenom"] = new List<string> { errorMessage };
                            }
                            else if (errorMessage.Contains("Identifiant"))
                            {
                                _fieldErrors["Identifiant"] = new List<string> { errorMessage };
                            }
                            else if (errorMessage.Contains("Email"))
                            {
                                _fieldErrors["Email"] = new List<string> { errorMessage };
                            }
                            else if (errorMessage.Contains("Telephone"))
                            {
                                _fieldErrors["Telephone"] = new List<string> { errorMessage };
                            }
                            else if (errorMessage.Contains("DateEmbauche"))
                            {
                                _fieldErrors["DateEmbauche"] = new List<string> { errorMessage };
                            }
                            else
                            {
                                // Si on ne peut pas déterminer le champ, ajouter à "General"
                                if (!_fieldErrors.ContainsKey("General"))
                                {
                                    _fieldErrors["General"] = new List<string>();
                                }
                                _fieldErrors["General"].Add(errorMessage);
                            }
                        }
                    }
                    
                    if (errorsList.Count > 0 && _fieldErrors.Count == 0)
                    {
                        _fieldErrors["General"] = errorsList;
                    }
                }
                // Si les erreurs sont dans un objet avec des clés par champ
                else if (errorsElement.ValueKind == JsonValueKind.Object)
                {
                    foreach (var property in errorsElement.EnumerateObject())
                    {
                        var fieldName = property.Name;
                        var fieldErrors = new List<string>();
                        
                        if (property.Value.ValueKind == JsonValueKind.Array)
                        {
                            foreach (var error in property.Value.EnumerateArray())
                            {
                                if (error.ValueKind == JsonValueKind.String)
                                {
                                    fieldErrors.Add(error.GetString() ?? string.Empty);
                                }
                            }
                        }
                        else if (property.Value.ValueKind == JsonValueKind.String)
                        {
                            fieldErrors.Add(property.Value.GetString() ?? string.Empty);
                        }
                        
                        if (fieldErrors.Count > 0)
                        {
                            _fieldErrors[fieldName] = fieldErrors;
                        }
                    }
                }
            }
            
            // Forcer une mise à jour de l'interface
            StateHasChanged();
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"Erreur lors de l'analyse du JSON: {ex.Message}");
            _errorMessage = "Une erreur est survenue lors de l'analyse de la réponse du serveur";
        }
    }
} 