@page "/"
@using System.Collections.Generic
@using System.Linq
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">Tableau de bord des taxes</MudText>

    <MudGrid>
        <!-- Première ligne de cartes de statistiques -->
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="3" Class="pa-4 d-flex flex-column align-center justify-center mud-height-full">
                <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Primary" Size="Size.Large" Class="mb-2"/>
                <MudText Typo="Typo.subtitle1" Class="text-center">Total des agents</MudText>
                <MudText Typo="Typo.h5" Color="Color.Primary">@totalAgents</MudText>
                <MudText Typo="Typo.caption">@String.Format("{0:+0.0%;-0.0%}", agentChangePercent)% depuis le mois dernier</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="3" Class="pa-4 d-flex flex-column align-center justify-center mud-height-full">
                <MudIcon Icon="@Icons.Material.Filled.Money" Color="Color.Success" Size="Size.Large" Class="mb-2"/>
                <MudText Typo="Typo.subtitle1" Class="text-center">Total des recettes</MudText>
                <MudText Typo="Typo.h5" Color="Color.Success">@String.Format("{0:N0}", totalRevenue) XOF</MudText>
                <MudText Typo="Typo.caption">@String.Format("{0:+0.0%;-0.0%}", revenueChangePercent)% depuis le mois dernier</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="3" Class="pa-4 d-flex flex-column align-center justify-center mud-height-full">
                <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Info" Size="Size.Large" Class="mb-2"/>
                <MudText Typo="Typo.subtitle1" Class="text-center">Total des contribuables</MudText>
                <MudText Typo="Typo.h5" Color="Color.Info">@String.Format("{0:N0}", totalTaxpayers)</MudText>
                <MudText Typo="Typo.caption">@String.Format("{0:+0.0%;-0.0%}", taxpayersChangePercent)% depuis le mois dernier</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="3" Class="pa-4 d-flex flex-column align-center justify-center mud-height-full">
                <MudIcon Icon="@Icons.Material.Filled.Payments" Color="Color.Warning" Size="Size.Large" Class="mb-2"/>
                <MudText Typo="Typo.subtitle1" Class="text-center">Recette moyenne</MudText>
                <MudText Typo="Typo.h5" Color="Color.Warning">@String.Format("{0:N0}", averageRevenuePerTaxpayer) XOF</MudText>
                <MudText Typo="Typo.caption">par contribuable</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudGrid Class="mt-4">
        <!-- Graphique des recettes par commune -->
        <MudItem xs="12" md="8">
            <MudPaper Elevation="3" Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-4">Recettes par commune</MudText>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@communeRevenueSeries" XAxisLabels="@communeNames" Width="100%" Height="350px"></MudChart>
            </MudPaper>
        </MudItem>

        <!-- Graphique de répartition des types de taxes -->
        <MudItem xs="12" md="4">
            <MudPaper Elevation="3" Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-4">Types de taxes</MudText>
                <MudChart ChartType="ChartType.Pie" InputData="@taxTypeValues" InputLabels="@taxTypeNames" Width="100%" Height="300px">
                    <CustomGraphics>
                        @if (taxTypeNames.Length == taxTypeValues.Length)
                        {
                            @for (int i = 0; i < taxTypeNames.Length-1; i++)
                            {
                                var percent = (taxTypeValues[i] / taxTypeValues.Sum()) * 100;
                                var i1 = i;
                                <MudText Align="Align.Center">@taxTypeNames[i1]: @percent.ToString("0.#")%</MudText>
                            }
                        }
                    </CustomGraphics>
                </MudChart>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudGrid Class="mt-4">
        <!-- Tableau des principales communes -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-4">Top 5 des communes</MudText>
                <MudTable Items="@topCommunes" Hover="true" Bordered="false" Striped="true">
                    <HeaderContent>
                        <MudTh>Commune</MudTh>
                        <MudTh>Recettes</MudTh>
                        <MudTh>Contribuables</MudTh>
                        <MudTh>Agents</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Commune">@context.Name</MudTd>
                        <MudTd DataLabel="Recettes">@String.Format("{0:N0}", context.Revenue) XOF</MudTd>
                        <MudTd DataLabel="Contribuables">@String.Format("{0:N0}", context.Taxpayers)</MudTd>
                        <MudTd DataLabel="Agents">@context.Agents</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>

        <!-- Graphique d'évolution des recettes -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="3" Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-4">Évolution des recettes</MudText>
                <MudChart ChartType="ChartType.Line" ChartSeries="@revenueTrendSeries" XAxisLabels="@monthLabels" Width="100%" Height="300px"></MudChart>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudGrid Class="mt-4">
        <!-- Filtres avancés -->
        <MudItem xs="12">
            <MudExpansionPanel>
                <TitleContent>
                    <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.FilterList" Class="mr-2" /> Filtres avancés</MudText>
                </TitleContent>
                <ChildContent>
                    <MudGrid>
                        <MudItem xs="12" md="3">
                            <MudSelect T="string" Label="Province" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedDepartment">
                                <MudSelectItem Value="@("Tous")">Tous</MudSelectItem>
                                @foreach (var dept in departments)
                                {
                                    <MudSelectItem Value="@dept">@dept</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudSelect T="string" Label="Type de taxe" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedTaxType">
                                <MudSelectItem Value="@("Tous")">Tous</MudSelectItem>
                                @foreach (var taxType in taxTypeNames)
                                {
                                    <MudSelectItem Value="@taxType">@taxType</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudDateRangePicker Label="Période" @bind-DateRange="dateRange" />
                        </MudItem>
                        <MudItem xs="12" md="2">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ApplyFilters" FullWidth="true">Appliquer les filtres</MudButton>
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
    </MudGrid>

    <MudGrid Class="mt-4">
        <!-- Zone d'export -->
        <MudItem xs="12">
            <MudPaper Elevation="3" Class="pa-4 d-flex justify-space-between align-center">
                <MudText Typo="Typo.h6">Exporter les données</MudText>
                <div>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PictureAsPdf" Class="ml-2" OnClick="@ExportToPdf">PDF</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.TableView" Class="ml-2" OnClick="@ExportToExcel">Excel</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Print" Class="ml-2" OnClick="@Print">Imprimer</MudButton>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    // Données simulées
    private int totalAgents = 12;
    private decimal totalRevenue = 25000;
    private int totalTaxpayers = 14000;
    private decimal averageRevenuePerTaxpayer => totalTaxpayers > 0 ? totalRevenue / totalTaxpayers : 0;
    private decimal agentChangePercent = 2.5m;
    private decimal revenueChangePercent = 5.7m;
    private decimal taxpayersChangePercent = 1.2m;

    // Données pour le graphique des communes
    private string[] communeNames = { "Ouagadougou", "Bobo-Dioulasso", "Koudougou", "Banfora", "Ouahigouya", "Tenkodogo", "Fada N'gourma" };
    private List<ChartSeries> communeRevenueSeries = new List<ChartSeries>() {
        new ChartSeries() { Name = "Recettes (k XOF)", Data = new double[] { 7500, 3200, 2800, 1900, 1700, 1600, 1400 } }
    };

    // Données pour le diagramme circulaire des types de taxes
    private string[] taxTypeNames = { "Impôt sur le revenu", "Taxe foncière", "Taxe d'habitation", "Taxe professionnelle", "Autres" };
    private double[] taxTypeValues = { 45, 25, 15, 10, 5,4 };

    // Conversion des données pour le graphique en tarte
    private List<ChartSeries> taxTypeSeries => new List<ChartSeries>() {
        new ChartSeries() {
            Name = "Types de taxes",
            Data = taxTypeValues
        }
    };

    // Données pour le tableau des communes
    private List<CommuneData> topCommunes = new List<CommuneData> {
        new CommuneData { Name = "Ouagadougou", Revenue = 7500000, Taxpayers = 45000, Agents = 320 },
        new CommuneData { Name = "Bobo-Dioulasso", Revenue = 3200000, Taxpayers = 18000, Agents = 150 },
        new CommuneData { Name = "Koudougou", Revenue = 2800000, Taxpayers = 16500, Agents = 130 },
        new CommuneData { Name = "Banfora", Revenue = 1900000, Taxpayers = 12000, Agents = 85 },
        new CommuneData { Name = "Ouahigouya", Revenue = 1700000, Taxpayers = 9500, Agents = 75 }
    };

    // Données pour le graphique d'évolution
    private string[] monthLabels = { "Jan", "Fév", "Mar", "Avr", "Mai", "Juin", "Juil", "Août", "Sep", "Oct", "Nov", "Déc" };
    private List<ChartSeries> revenueTrendSeries = new List<ChartSeries>() {
        new ChartSeries() { Name = "2024", Data = new double[] { 1800, 1900, 2100, 2000, 2200, 2150, 2300, 2250, 2400, 2500, 2600, 2700 } },
        new ChartSeries() { Name = "2023", Data = new double[] { 1600, 1650, 1800, 1700, 1900, 2000, 2100, 2050, 2200, 2300, 2400, 2500 } }
    };

    // Filtres
    private string selectedDepartment = "Tous";
    private string selectedTaxType = "Tous";
    private DateRange dateRange = new DateRange(DateTime.Now.AddMonths(-6), DateTime.Now);
    private string[] departments = { "Kadiogo", "Houet", "Boulkiemdé", "Comoé", "Yatenga" };
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        // S'assurer que les tableaux sont initialisés
        if (taxTypeNames == null)
        {
            taxTypeNames = new string[] { "Impôt sur le revenu", "Taxe foncière", "Taxe d'habitation", "Taxe professionnelle", "Autres" };
        }

        if (taxTypeValues == null)
        {
            taxTypeValues = new double[] { 45, 25, 15, 10, 5,4 };
        }

        // S'assurer que les longueurs des tableaux correspondent
        if (taxTypeNames.Length != taxTypeValues.Length)
        {
            // Ajuster les tableaux pour qu'ils aient la même longueur
            int minLength = Math.Min(taxTypeNames.Length, taxTypeValues.Length);
            Array.Resize(ref taxTypeNames, minLength);
            Array.Resize(ref taxTypeValues, minLength);
        }
    }

    private void ApplyFilters()
    {
        try
        {
            // Ici, vous implémenteriez la logique pour filtrer les données selon les critères sélectionnés
            // Pour cette démonstration, nous simulons un changement dans les données

            // Simulation d'une mise à jour des données basée sur les filtres
            if (selectedDepartment != "Tous" || selectedTaxType != "Tous")
            {
                // Simuler des valeurs différentes pour les filtres
                Random rand = new Random();
                totalAgents = rand.Next(800, 1300);
                totalRevenue = rand.Next(15000000, 30000000);
                totalTaxpayers = rand.Next(120000, 160000);

                // Mettre à jour d'autres données selon les filtres
                UpdateChartData();
            }
            else
            {
                // Retour aux valeurs par défaut
                totalAgents = 1250;
                totalRevenue = 25480000;
                totalTaxpayers = 145600;

                // Réinitialiser les autres données
                ResetChartData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'application des filtres: {ex.Message}");
        }
    }

    private void UpdateChartData()
    {
        try
        {
            // Cette méthode simulerait la mise à jour des graphiques en fonction des filtres
            // Dans une implémentation réelle, elle appellerait un service pour récupérer les données filtrées
            Random rand = new Random();

            // Mettre à jour les données des communes
            if (communeNames != null && communeNames.Length > 0 && communeRevenueSeries != null && communeRevenueSeries.Count > 0)
            {
                double[] newCommuneData = new double[communeNames.Length];
                for (int i = 0; i < communeNames.Length; i++)
                {
                    newCommuneData[i] = rand.Next(1000, 8000);
                }
                communeRevenueSeries[0].Data = newCommuneData;
            }

            // Mettre à jour les données des types de taxes
            if (taxTypeValues != null && taxTypeValues.Length > 0)
            {
                for (int i = 0; i < taxTypeValues.Length; i++)
                {
                    taxTypeValues[i] = rand.Next(5, 50);
                }
            }

            // Mettre à jour les données des tendances
            if (monthLabels != null && monthLabels.Length > 0 && revenueTrendSeries != null && revenueTrendSeries.Count >= 2)
            {
                double[] newTrendData2024 = new double[monthLabels.Length];
                double[] newTrendData2023 = new double[monthLabels.Length];
                for (int i = 0; i < monthLabels.Length; i++)
                {
                    newTrendData2024[i] = rand.Next(1800, 2800);
                    newTrendData2023[i] = rand.Next(1600, 2500);
                }
                revenueTrendSeries[0].Data = newTrendData2024;
                revenueTrendSeries[1].Data = newTrendData2023;
            }

            // Mettre à jour le tableau des communes
            if (topCommunes != null)
            {
                foreach (var commune in topCommunes)
                {
                    commune.Revenue = rand.Next(1500000, 7500000);
                    commune.Taxpayers = rand.Next(9000, 45000);
                    commune.Agents = rand.Next(70, 320);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la mise à jour des données: {ex.Message}");
        }
    }

    private void ResetChartData()
    {
        try
        {
            // Réinitialiser les données des graphiques à leurs valeurs par défaut
            if (communeRevenueSeries != null && communeRevenueSeries.Count > 0)
            {
                communeRevenueSeries[0].Data = new double[] { 7500, 3200, 2800, 1900, 1700, 1600, 1400 };
            }

            if (taxTypeValues != null)
            {
                taxTypeValues = new double[] { 45, 25, 15, 10, 5 };
            }

            if (revenueTrendSeries != null && revenueTrendSeries.Count >= 2)
            {
                revenueTrendSeries[0].Data = new double[] { 1800, 1900, 2100, 2000, 2200, 2150, 2300, 2250, 2400, 2500, 2600, 2700 };
                revenueTrendSeries[1].Data = new double[] { 1600, 1650, 1800, 1700, 1900, 2000, 2100, 2050, 2200, 2300, 2400, 2500 };
            }

            // Réinitialiser le tableau des communes
            topCommunes = new List<CommuneData> {
                new CommuneData { Name = "Ouagadougou", Revenue = 7500000, Taxpayers = 45000, Agents = 320 },
                new CommuneData { Name = "Bobo-Dioulasso", Revenue = 3200000, Taxpayers = 18000, Agents = 150 },
                new CommuneData { Name = "Koudougou", Revenue = 2800000, Taxpayers = 16500, Agents = 130 },
                new CommuneData { Name = "Banfora", Revenue = 1900000, Taxpayers = 12000, Agents = 85 },
                new CommuneData { Name = "Ouahigouya", Revenue = 1700000, Taxpayers = 9500, Agents = 75 }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la réinitialisation des données: {ex.Message}");
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            // Dans une implémentation réelle, cette méthode génèrerait un PDF
            await JSRuntime.InvokeVoidAsync("alert", "Export PDF généré avec succès");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'export PDF: {ex.Message}");
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            // Dans une implémentation réelle, cette méthode génèrerait un fichier Excel
            await JSRuntime.InvokeVoidAsync("alert", "Export Excel généré avec succès");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'export Excel: {ex.Message}");
        }
    }

    private async Task Print()
    {
        try
        {
            // Dans une implémentation réelle, cette méthode initierait l'impression du dashboard
            await JSRuntime.InvokeVoidAsync("print");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'impression: {ex.Message}");
        }
    }

    public class CommuneData
    {
        public string Name { get; set; }
        public decimal Revenue { get; set; }
        public int Taxpayers { get; set; }
        public int Agents { get; set; }
    }
}