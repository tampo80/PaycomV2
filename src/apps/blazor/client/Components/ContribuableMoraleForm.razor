@using PayCom.Blazor.Client.Pages.Contribuables.Models
@using PayCom.Blazor.Infrastructure.Api
@using System.Text.Json
@inject IApiClient ApiClient
@inject ISnackbar Snackbar

<MudPaper Elevation="0" Class="pb-4">
    <MudForm Model="@this" @ref="form" @bind-IsValid="@_isValid">
        <style>
            /* Style amélioré pour les onglets secondaires */
            .secondary-tabs .mud-tabs-toolbar {
                background-color: white;
                border-radius: 10px;
                margin-bottom: 20px;
                padding: 6px;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            }
            
            .secondary-tabs .mud-tab {
                min-height: 46px;
                border-radius: 6px;
                margin: 0 4px;
                padding: 6px 16px;
                transition: all 0.3s ease;
                font-size: 0.95rem;
                opacity: 0.8;
                color: var(--mud-palette-text-primary);
                background-color: var(--mud-palette-grey-lighten-5);
            }
            
            .secondary-tabs .mud-tab-label {
                justify-content: flex-start;
            }
            
            .secondary-tabs .mud-tab .mud-icon-root {
                margin-right: 10px;
                font-size: 1.2rem;
            }
            
            .secondary-tabs .mud-tab.mud-tab-active {
                background-color: var(--mud-palette-secondary);
                color: white;
                font-weight: 500;
                transform: translateY(-1px);
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
                opacity: 1;
                border: 1px solid var(--mud-palette-secondary-darken);
            }
            
            .secondary-tabs .mud-tab:hover:not(.mud-tab-active) {
                background-color: var(--mud-palette-grey-lighten-3);
                opacity: 0.95;
                transform: translateY(-1px);
                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
            }
            
            .secondary-tabs .mud-tab-slider {
                height: 3px;
                border-radius: 3px;
                background-color: var(--mud-palette-secondary-darken);
            }
            
            /* Animation de transition pour les panneaux */
            .secondary-tabs .mud-tab-panel {
                animation: fadeIn 0.4s ease;
            }
            
            /* Améliorations des champs de saisie */
            ::deep .mud-input {
                transition: all 0.3s ease;
            }
            
            ::deep .mud-input-outlined:focus-within {
                box-shadow: 0 0 0 3px rgba(var(--mud-palette-primary-rgb), 0.1);
            }
            
            ::deep .mud-input-outlined.mud-shrink {
                border-color: var(--mud-palette-primary);
            }
            
            /* Style pour les champs valides/invalides */
            ::deep .valid-field.mud-input-outlined {
                border-color: var(--mud-palette-success);
            }
            
            ::deep .invalid-field.mud-input-outlined {
                border-color: var(--mud-palette-error);
            }
            
            /* Animation pour les transitions */
            .form-appear {
                animation: formAppear 0.5s ease;
                opacity: 1;
            }
            
            @@keyframes fadeIn {
                from { opacity: 0; transform: translateY(5px); }
                to { opacity: 1; transform: translateY(0); }
            }
            
            @@keyframes formAppear {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
            }
            
            /* Indicateurs de progression */
            .tab-indicator {
                display: flex;
                justify-content: center;
                margin: 15px 0;
            }
            
            .tab-indicator-item {
                width: 12px;
                height: 12px;
                margin: 0 8px;
                border-radius: 50%;
                background-color: var(--mud-palette-grey-lighten-3);
                transition: all 0.3s ease;
            }
            
            .tab-indicator-item.active {
                background-color: var(--mud-palette-primary);
                transform: scale(1.2);
                box-shadow: 0 0 0 2px rgba(var(--mud-palette-primary-rgb), 0.2);
            }
            
            /* Styles pour les onglets actifs - texte blanc */
            .secondary-tabs .mud-tabs-toolbar .mud-tab-active .mud-tab-label {
                color: white;
                font-weight: 600;
            }
        </style>
    
        <MudTabs Elevation="0" 
                Color="Color.Secondary" 
                ApplyEffectsToContainer="true" 
                PanelClass="pa-4" 
                Class="mt-4 secondary-tabs"
                Rounded="true"
                Border="false"
                ActivePanelIndex="@_activeTabIndex"
                ActivePanelIndexChanged="HandleTabChanged"
                Outlined="true"
                Centered="true">
            <MudTabPanel Text="Informations générales" Icon="@Icons.Material.Filled.Business">
                <MudCard Elevation="0" Class="form-appear">
                    <MudCardContent>
                        <MudGrid Spacing="2">
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@RaisonSociale" 
                                            Label="Raison sociale" 
                                            Variant="Variant.Outlined"
                                            Required="true" 
                                            RequiredError="La raison sociale est requise"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.Business"
                                            AdornmentColor="Color.Primary"
                                            HelperText="Nom officiel de l'entreprise"
                                            Counter="150"
                                            Immediate="true"
                                            ValueChanged="@((string val) => { RaisonSociale = val; OnValueChanged(); })"
                                            Validation="@(new Func<string, string>(ValidateRequired))" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@NomCommercial" 
                                            Label="Nom commercial" 
                                            Variant="Variant.Outlined"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.Store"
                                            AdornmentColor="Color.Primary"
                                            ValueChanged="@((string val) => { NomCommercial = val; OnValueChanged(); })"
                                            HelperText="Nom d'usage de l'entreprise (optionnel)"
                                            Counter="150" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@RCCM" 
                                            Label="Numéro RCCM" 
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            RequiredError="Le numéro RCCM est requis"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.Description"
                                            AdornmentColor="Color.Primary"
                                            HelperText="Registre du Commerce et du Crédit Mobilier"
                                            Counter="50"
                                            Immediate="true"
                                            ValueChanged="@((string val) => { RCCM = val; OnValueChanged(); })"
                                            Validation="@(new Func<string, string>(ValidateRequired))" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@NIF" 
                                            Label="NIF" 
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            RequiredError="Le NIF est requis"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.RequestQuote"
                                            AdornmentColor="Color.Primary"
                                            HelperText="Numéro d'Identification Fiscale"
                                            Counter="50"
                                            Immediate="true"
                                            ValueChanged="@((string val) => { NIF = val; OnValueChanged(); })"
                                            Validation="@(new Func<string, string>(ValidateRequired))" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions Class="pt-2">
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Primary"
                                 EndIcon="@Icons.Material.Filled.ArrowForward"
                                 OnClick="@(() => NavigateToNextTab(1))">
                            Suivant
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudTabPanel>

            <MudTabPanel Text="Détails de l'entreprise" Icon="@Icons.Material.Filled.Info">
                <MudCard Elevation="0" Class="form-appear">
                    <MudCardContent>
                        <MudGrid Spacing="2">
                            <MudItem xs="12" md="6">
                                <MudDatePicker Date="@DateCreationEntreprise" 
                                             Label="Date de création" 
                                             Variant="Variant.Outlined"
                                             Required="true"
                                             RequiredError="La date de création est requise"
                                             Adornment="Adornment.Start"
                                             AdornmentIcon="@Icons.Material.Filled.CalendarMonth"
                                             AdornmentColor="Color.Primary"
                                             HelperText="Date de création de l'entreprise"
                                             Placeholder="Sélectionnez une date"
                                             DateFormat="dd/MM/yyyy"
                                             DateChanged="@((DateTime? date) => { DateCreationEntreprise = date; OnValueChanged(); })" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@FormeJuridique" 
                                            Label="Forme juridique" 
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            RequiredError="La forme juridique est requise"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.AccountBalance"
                                            AdornmentColor="Color.Primary"
                                            HelperText="Forme juridique de l'entreprise (SA, SARL, etc.)"
                                            Counter="50"
                                            Immediate="true"
                                            ValueChanged="@((string val) => { FormeJuridique = val; OnValueChanged(); })"
                                            Validation="@(new Func<string, string>(ValidateRequired))" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@SecteurActivite" 
                                            Label="Secteur d'activité" 
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            RequiredError="Le secteur d'activité est requis"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.Category"
                                            AdornmentColor="Color.Primary"
                                            HelperText="Secteur principal d'activité de l'entreprise"
                                            Counter="100"
                                            Immediate="true"
                                            ValueChanged="@((string val) => { SecteurActivite = val; OnValueChanged(); })"
                                            Validation="@(new Func<string, string>(ValidateRequired))" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@RepresentantLegal" 
                                            Label="Représentant légal" 
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            RequiredError="Le représentant légal est requis"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.Person"
                                            AdornmentColor="Color.Primary"
                                            HelperText="Nom et prénom du représentant légal"
                                            Counter="100"
                                            Immediate="true"
                                            ValueChanged="@((string val) => { RepresentantLegal = val; OnValueChanged(); })"
                                            Validation="@(new Func<string, string>(ValidateRequired))" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudNumericField Value="@CapitalSocial" 
                                               Label="Capital social" 
                                               Variant="Variant.Outlined"
                                               Adornment="Adornment.Start"
                                               AdornmentIcon="@Icons.Material.Filled.MonetizationOn"
                                               AdornmentColor="Color.Primary"
                                               HelperText="Capital social de l'entreprise (optionnel)"
                                               Format="N0"
                                               ValueChanged="@((decimal? val) => { CapitalSocial = val; OnValueChanged(); })"
                                               Min="0" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@TypeActivite" 
                                            Label="Type d'activité" 
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            RequiredError="Le type d'activité est requis"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.Work"
                                            AdornmentColor="Color.Primary"
                                            HelperText="Type d'activité principale"
                                            Counter="100"
                                            Immediate="true"
                                            ValueChanged="@((string val) => { TypeActivite = val; OnValueChanged(); })"
                                            Validation="@(new Func<string, string>(ValidateRequired))" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions Class="pt-2">
                        <MudButton Variant="Variant.Outlined" 
                                 Color="Color.Default"
                                 StartIcon="@Icons.Material.Filled.ArrowBack"
                                 OnClick="@(() => _activeTabIndex = 0)">
                            Précédent
                        </MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled"
                                 Color="Color.Primary"
                                 EndIcon="@Icons.Material.Filled.ArrowForward"
                                 OnClick="@(() => NavigateToNextTab(2))">
                            Suivant
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudTabPanel>

            <MudTabPanel Text="Identification et contact" Icon="@Icons.Material.Filled.ContactPhone">
                <MudCard Elevation="0" Class="form-appear">
                    <MudCardContent>
                        <MudGrid Spacing="2">
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@NumeroIdentification" 
                                            Label="Numéro d'identification" 
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            RequiredError="Le numéro d'identification est requis"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.Badge"
                                            AdornmentColor="Color.Primary"
                                            HelperText="Numéro d'identification unique (généré automatiquement)"
                                            Counter="50"
                                            Immediate="true"
                                            ValueChanged="@((string val) => { NumeroIdentification = val; OnValueChanged(); })"
                                            Validation="@(new Func<string, string>(ValidateRequired))" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudDatePicker Date="@DateEnregistrement" 
                                             Label="Date d'enregistrement" 
                                             Variant="Variant.Outlined"
                                             Required="true"
                                             RequiredError="La date d'enregistrement est requise"
                                             Adornment="Adornment.Start"
                                             AdornmentIcon="@Icons.Material.Filled.CalendarToday"
                                             AdornmentColor="Color.Primary"
                                             HelperText="Date d'enregistrement du contribuable"
                                             Placeholder="Sélectionnez une date"
                                             DateFormat="dd/MM/yyyy"
                                             DateChanged="@((DateTime? date) => { DateEnregistrement = date; OnValueChanged(); })" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudSelect Value="@Statut" 
                                         Label="Statut" 
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         RequiredError="Le statut est requis"
                                         Adornment="Adornment.Start"
                                         AdornmentIcon="@Icons.Material.Filled.VerifiedUser"
                                         AdornmentColor="Color.Primary"
                                         ValueChanged="@((StatutContribuableType val) => { Statut = val; OnValueChanged(); })"
                                         HelperText="Statut du contribuable">
                                    <MudSelectItem Value="@StatutContribuableType.Actif">Actif</MudSelectItem>
                                    <MudSelectItem Value="@StatutContribuableType.Inactif">Inactif</MudSelectItem>
                                    <MudSelectItem Value="@StatutContribuableType.EnAttente">En attente</MudSelectItem>
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField Value="@Adresse" 
                                            Label="Adresse" 
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            RequiredError="L'adresse est requise"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.Home"
                                            AdornmentColor="Color.Primary"
                                            HelperText="Adresse complète de l'entreprise"
                                            Counter="200"
                                            Lines="2"
                                            Immediate="true"
                                            ValueChanged="@((string val) => { Adresse = val; OnValueChanged(); })"
                                            Validation="@(new Func<string, string>(ValidateRequired))" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@ContactPrincipal" 
                                            Label="Contact principal" 
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            RequiredError="Le contact principal est requis"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.Phone"
                                            AdornmentColor="Color.Primary"
                                            HelperText="Numéro de téléphone principal"
                                            Counter="50"
                                            Immediate="true"
                                            ValueChanged="@((string val) => { ContactPrincipal = val; OnValueChanged(); })"
                                            Validation="@(new Func<string, string>(ValidateRequired))" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@ContactSecondaire" 
                                            Label="Contact secondaire" 
                                            Variant="Variant.Outlined"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.PhoneAndroid"
                                            AdornmentColor="Color.Secondary"
                                            ValueChanged="@((string val) => { ContactSecondaire = val; OnValueChanged(); })"
                                            HelperText="Numéro de téléphone secondaire (optionnel)"
                                            Counter="50" />
                            </MudItem>
                            
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@Email" 
                                            Label="Email" 
                                            Variant="Variant.Outlined"
                                            Adornment="Adornment.Start"
                                            AdornmentIcon="@Icons.Material.Filled.Email"
                                            AdornmentColor="Color.Primary"
                                            ValueChanged="@((string val) => { Email = val; OnValueChanged(); })"
                                            HelperText="Adresse email de l'entreprise (optionnelle)"
                                            Counter="100" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions Class="pt-2">
                        <MudButton Variant="Variant.Outlined" 
                                 Color="Color.Default"
                                 StartIcon="@Icons.Material.Filled.ArrowBack"
                                 OnClick="@(() => _activeTabIndex = 1)">
                            Précédent
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudTabPanel>
        </MudTabs>
        
        <div class="tab-indicator">
            @for (int i = 0; i < 3; i++)
            {
                int tabIndex = i;
                <div class="tab-indicator-item @(tabIndex == _activeTabIndex ? "active" : "")" 
                     @onclick="() => _activeTabIndex = tabIndex"></div>
            }
        </div>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4" ShowCloseIcon="true" CloseIconClicked="() => _errorMessage = string.Empty">
                <div class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Class="mr-2" />
                    <MudText>@_errorMessage</MudText>
                </div>
            </MudAlert>
        }
    </MudForm>
</MudPaper>

@if (!string.IsNullOrEmpty(_result))
{
    <MudPaper Class="pa-4 mt-4" Elevation="3">
        <MudText Typo="Typo.subtitle1" Class="mb-2">Résultat</MudText>
        <MudText Typo="Typo.body1" Style="white-space: pre-wrap;">@_result</MudText>
    </MudPaper>
}

@code {
    [Parameter] public EventCallback<Guid> OnSuccess { get; set; }
    [Parameter] public EventCallback<bool> IsValidChanged { get; set; }

    private MudForm form = new();
    private string RaisonSociale { get; set; } = string.Empty;
    private string NomCommercial { get; set; } = string.Empty;
    private string RCCM { get; set; } = string.Empty;
    private string NIF { get; set; } = string.Empty;
    private DateTime? DateCreationEntreprise { get; set; } = DateTime.Now.AddYears(-1);
    private string FormeJuridique { get; set; } = string.Empty;
    private string SecteurActivite { get; set; } = string.Empty;
    private string RepresentantLegal { get; set; } = string.Empty;
    private decimal? CapitalSocial { get; set; } = null;
    private string NumeroIdentification { get; set; } = "PM-" + DateTime.Now.Ticks.ToString().Substring(10);
    private DateTime? DateEnregistrement { get; set; } = DateTime.Now;
    private StatutContribuableType Statut { get; set; } = StatutContribuableType.Actif;
    private string Adresse { get; set; } = string.Empty;
    private string ContactPrincipal { get; set; } = string.Empty;
    private string ContactSecondaire { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;
    private string TypeActivite { get; set; } = string.Empty;
    
    private string _result = string.Empty;
    private string _errorMessage = string.Empty;
    private bool _processing = false;
    private bool _isValid = false;
    private int _activeTabIndex = 0;
    
    private const string ApiVersion = "1.0";
    
    // Ajout d'une propriété qui expose l'état de validité du formulaire
    public bool IsValid => _isValid && ValidateAllTabs();
    
    private bool _validationInitialized = false;
    private bool _hasInteracted = false;
    
    protected override void OnInitialized()
    {
        // Générer un numéro d'identification unique
        NumeroIdentification = "PM-" + DateTime.Now.Ticks.ToString().Substring(10);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ne pas lancer la validation dès le chargement initial
            _validationInitialized = true;
        }
    }
    
    private void HandleTabChanged(int index)
    {
        _activeTabIndex = index;
        StateHasChanged();
    }
    
    private async Task ValidateFormAsync()
    {
        if (!_validationInitialized) return;
        
        await Task.Delay(100); // Donner du temps au formulaire pour s'initialiser
        await form.Validate();
        bool isValid = _isValid && ValidateAllTabs();
        await IsValidChanged.InvokeAsync(isValid);
        
        // Mise à jour des états visuels si nécessaire
        if (!isValid && _hasInteracted)
        {
            _errorMessage = "Veuillez remplir tous les champs obligatoires dans tous les onglets.";
        }
        else
        {
            _errorMessage = string.Empty;
        }
        StateHasChanged();
    }
    
    // Déclenche la validation après chaque changement important
    private async Task OnValueChanged()
    {
        _hasInteracted = true;
        await ValidateFormAsync();
    }
    
    private bool ValidateTabOne()
    {
        // Validation onglet 1 (Informations générales)
        return !string.IsNullOrWhiteSpace(RaisonSociale) && 
               !string.IsNullOrWhiteSpace(RCCM) && 
               !string.IsNullOrWhiteSpace(NIF);
    }
    
    private bool ValidateTabTwo()
    {
        // Validation onglet 2 (Détails de l'entreprise)
        return DateCreationEntreprise.HasValue && 
               DateCreationEntreprise.Value <= DateTime.Now &&
               !string.IsNullOrWhiteSpace(FormeJuridique) &&
               !string.IsNullOrWhiteSpace(SecteurActivite) &&
               !string.IsNullOrWhiteSpace(RepresentantLegal) &&
               !string.IsNullOrWhiteSpace(TypeActivite);
    }
    
    private bool ValidateTabThree()
    {
        // Validation onglet 3 (Identification et contact)
        return !string.IsNullOrWhiteSpace(NumeroIdentification) && 
               DateEnregistrement.HasValue &&
               DateEnregistrement.Value <= DateTime.Now &&
               !string.IsNullOrWhiteSpace(Adresse) &&
               !string.IsNullOrWhiteSpace(ContactPrincipal) &&
               (string.IsNullOrWhiteSpace(Email) || Email.Contains('@'));
    }
    
    private bool ValidateAllTabs()
    {
        return ValidateTabOne() && ValidateTabTwo() && ValidateTabThree();
    }
    
    private async Task NavigateToNextTab(int nextTabIndex)
    {
        // Vérifier que l'onglet courant est valide avant de naviguer
        bool isCurrentTabValid = false;
        
        switch (_activeTabIndex)
        {
            case 0:
                isCurrentTabValid = ValidateTabOne();
                break;
            case 1:
                isCurrentTabValid = ValidateTabTwo();
                break;
            case 2:
                isCurrentTabValid = ValidateTabThree();
                break;
        }
        
        if (isCurrentTabValid)
        {
            _activeTabIndex = nextTabIndex;
            StateHasChanged();
        }
        else 
        {
            _hasInteracted = true;
            await ValidateFormAsync();
            _errorMessage = "Veuillez remplir tous les champs obligatoires de cet onglet avant de continuer.";
        }
    }
    
    private string ValidateRequired(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "Ce champ est requis";
        return string.Empty;
    }
    
    public async Task Submit()
    {
        if (_processing) return;

        await form.Validate();
        
        if (!_isValid || !ValidateAllTabs())
        {
            _errorMessage = "Veuillez remplir tous les champs obligatoires dans tous les onglets.";
            return;
        }
        
        _processing = true;
        _result = string.Empty;
        _errorMessage = string.Empty;
        
        try
        {
            // Create command
            var command = new CreateContribuableCommand
            {
                // Personne morale spécifique
                NomCommercial = RaisonSociale,
                NumeroRegistreCommerce = RCCM,
                Nif = NIF,
                DateCreationEntreprise = DateCreationEntreprise ?? DateTime.Now.AddYears(-1),
                FormeJuridique = FormeJuridique,
                SecteurActivite = SecteurActivite,
                RepresentantLegal = RepresentantLegal,
                CapitalSocial = CapitalSocial.HasValue ? (double)CapitalSocial.Value : null,
                
                // Champs communs
                NumeroIdentification = NumeroIdentification,
                DateEnregistrement = DateEnregistrement ?? DateTime.Now,
                Adresse = Adresse,
                ContactPrincipal = ContactPrincipal,
                ContactSecondaire = ContactSecondaire ?? string.Empty,
                Email = Email ?? string.Empty,
                TypeActivite = TypeActivite,
                
                // Forcer explicitement les valeurs des énumérations
                TypeContribuable = MapToApiTypeContribuable(TypeContribuableType.PersonneMorale),
                Statut = MapToApiStatut(Statut)
            };
            
            // Appel API
            var response = await ApiClient.CreateContribuableEndPointsAsync(ApiVersion, command);
            
            if (response != null && response.Id != Guid.Empty)
            {
                Snackbar.Add("Contribuable personne morale ajouté avec succès", Severity.Success);
                await OnSuccess.InvokeAsync(response.Id);
            }
            else
            {
                _errorMessage = "Une erreur est survenue lors de la création du contribuable. Réessayez.";
            }
        }
        catch (ApiException ex)
        {
            ParseApiErrors(ex);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Erreur : {ex.Message}";
        }
        finally
        {
            _processing = false;
        }
    }
    
    private void ParseApiErrors(ApiException ex)
    {
        try
        {
            if (string.IsNullOrEmpty(ex.Response)) 
            {
                _errorMessage = ex.Message;
                return;
            }
            
            var doc = JsonDocument.Parse(ex.Response);
            
            if (doc.RootElement.TryGetProperty("title", out var titleElement))
            {
                _errorMessage = titleElement.GetString() ?? ex.Message;
            }
            else if (doc.RootElement.TryGetProperty("errors", out var errorsElement))
            {
                var errors = new List<string>();
                
                if (errorsElement.ValueKind == JsonValueKind.Object)
                {
                    foreach (var error in errorsElement.EnumerateObject())
                    {
                        if (error.Value.ValueKind == JsonValueKind.Array)
                        {
                            foreach (var item in error.Value.EnumerateArray())
                            {
                                errors.Add($"{error.Name}: {item.GetString()}");
                            }
                        }
                    }
                }
                else if (errorsElement.ValueKind == JsonValueKind.Array)
                {
                    foreach (var item in errorsElement.EnumerateArray())
                    {
                        errors.Add(item.GetString() ?? "Erreur de validation");
                    }
                }
                
                _errorMessage = string.Join("\n", errors);
            }
            else
            {
                _errorMessage = ex.Message;
            }
        }
        catch
        {
            _errorMessage = ex.Message;
        }
    }
    
    private PayCom.Blazor.Infrastructure.Api.TypeContribuable MapToApiTypeContribuable(TypeContribuableType type)
    {
        return type switch
        {
            TypeContribuableType.PersonnePhysique => PayCom.Blazor.Infrastructure.Api.TypeContribuable._0,
            TypeContribuableType.PersonneMorale => PayCom.Blazor.Infrastructure.Api.TypeContribuable._1,
            _ => PayCom.Blazor.Infrastructure.Api.TypeContribuable._1 // Défaut personne morale
        };
    }
    
    private PayCom.Blazor.Infrastructure.Api.StatutContribuable MapToApiStatut(StatutContribuableType statut)
    {
        return statut switch
        {
            StatutContribuableType.Actif => PayCom.Blazor.Infrastructure.Api.StatutContribuable._0,
            StatutContribuableType.Inactif => PayCom.Blazor.Infrastructure.Api.StatutContribuable._1,
            StatutContribuableType.EnAttente => PayCom.Blazor.Infrastructure.Api.StatutContribuable._2,
            _ => PayCom.Blazor.Infrastructure.Api.StatutContribuable._0
        };
    }
} 